var d = diagrams.box.generateDefinition,
  c = diagrams.box.generateContainer,
  s = diagrams.shared.get;

diagrams.box({
  name: s('project') + ' api (non exhaustive)',
  body: [
    "AnyTypeAnnotation",
    "ArrayExpression",
    "ArrayPattern",
    "ArrayTypeAnnotation",
    "ArrowFunctionExpression",
    "AssignmentExpression",
    "AssignmentPattern",
    "AwaitExpression",
    "BinaryExpression",
    "BindExpression",
    "Block",
    "BlockStatement",
    "BooleanLiteralTypeAnnotation",
    "BooleanTypeAnnotation",
    "BreakStatement",
    "CallExpression",
    "CatchClause",
    "ClassBody",
    "ClassDeclaration",
    "ClassExpression",
    "ClassImplements",
    "ClassProperty",
    "ClassPropertyDefinition",
    "Comment",
    "CommentBlock",
    "CommentLine",
    "ComprehensionBlock",
    "ComprehensionExpression",
    "ConditionalExpression",
    "ContinueStatement",
    "DebuggerStatement",
    "Declaration",
    "DeclareClass",
    "DeclareFunction",
    "DeclareModule",
    "DeclareVariable",
    "Decorator",
    "DoExpression",
    "DoWhileStatement",
    "EmptyStatement",
    "ExportAllDeclaration",
    "ExportBatchSpecifier",
    "ExportDeclaration",
    "ExportDefaultDeclaration",
    "ExportDefaultSpecifier",
    "ExportNamedDeclaration",
    "ExportNamespaceSpecifier",
    "ExportSpecifier",
    "Expression",
    "ExpressionStatement",
    "File",
    "ForInStatement",
    "ForOfStatement",
    "ForStatement",
    "Function",
    "FunctionDeclaration",
    "FunctionExpression",
    "FunctionTypeAnnotation",
    "FunctionTypeParam",
    "GeneratorExpression",
    "GenericTypeAnnotation",
    "GraphExpression",
    "GraphIndexExpression",
    "Identifier",
    "IfStatement",
    "ImportDeclaration",
    "ImportDefaultSpecifier",
    "ImportNamespaceSpecifier",
    "ImportSpecifier",
    "InterfaceDeclaration",
    "InterfaceExtends",
    "IntersectionTypeAnnotation",
    "JSXAttribute",
    "JSXClosingElement",
    "JSXElement",
    "JSXEmptyExpression",
    "JSXExpressionContainer",
    "JSXIdentifier",
    "JSXMemberExpression",
    "JSXNamespacedName",
    "JSXOpeningElement",
    "JSXSpreadAttribute",
    "JSXText",
    "LabeledStatement",
    "LetExpression",
    "LetStatement",
    "Line",
    "Literal",
    "LogicalExpression",
    "MemberExpression",
    "MemberTypeAnnotation",
    "MetaProperty",
    "MethodDefinition",
    "MixedTypeAnnotation",
    "ModuleSpecifier",
    "NewExpression",
    "Node",
    "Noop",
    "NullableTypeAnnotation",
    "NumberLiteralTypeAnnotation",
    "NumberTypeAnnotation",
    "ObjectExpression",
    "ObjectPattern",
    "ObjectTypeAnnotation",
    "ObjectTypeCallProperty",
    "ObjectTypeIndexer",
    "ObjectTypeProperty",
    "ParenthesizedExpression",
    "Pattern",
    "Position",
    "Printable",
    "Program",
    "Property",
    "PropertyPattern",
    "QualifiedTypeIdentifier",
    "RestElement",
    "ReturnStatement",
    "SequenceExpression",
    "SourceLocation",
    "Specifier",
    "SpreadElement",
    "SpreadElementPattern",
    "SpreadProperty",
    "SpreadPropertyPattern",
    "Statement",
    "StringLiteralTypeAnnotation",
    "StringTypeAnnotation",
    "Super",
    "SwitchCase",
    "SwitchStatement",
    "TaggedTemplateExpression",
    "TemplateElement",
    "TemplateLiteral",
    "ThisExpression",
    "ThrowStatement",
    "TryStatement",
    "TupleTypeAnnotation",
    "Type",
    "TypeAlias",
    "TypeAnnotation",
    "TypeCastExpression",
    "TypeParameterDeclaration",
    "TypeParameterInstantiation",
    "TypeofTypeAnnotation",
    "UnaryExpression",
    "UnionTypeAnnotation",
    "UpdateExpression",
    "VariableDeclaration",
    "VariableDeclarator",
    "VoidTypeAnnotation",
    "WhileStatement",
    "WithStatement",
    "XML",
    "XMLAnyName",
    "XMLAttribute",
    "XMLAttributeSelector",
    "XMLCdata",
    "XMLComment",
    "XMLDefaultDeclaration",
    "XMLElement",
    "XMLEndTag",
    "XMLEscape",
    "XMLFilterExpression",
    "XMLFunctionQualifiedIdentifier",
    "XMLList",
    "XMLName",
    "XMLPointTag",
    "XMLProcessingInstruction",
    "XMLQualifiedIdentifier",
    "XMLStartTag",
    "XMLText",
    "YieldExpression",
    "anyTypeAnnotation",
    "arrayExpression",
    "arrayPattern",
    "arrayStatement",
    "arrayTypeAnnotation",
    "arrowFunctionExpression",
    "arrowFunctionStatement",
    "assignmentExpression",
    "assignmentPattern",
    "assignmentStatement",
    "awaitExpression",
    "awaitStatement",
    "binaryExpression",
    "binaryStatement",
    "bindExpression",
    "bindStatement",
    "block",
    "blockStatement",
    "booleanLiteralTypeAnnotation",
    "booleanTypeAnnotation",
    "breakStatement",
    "callExpression",
    "callStatement",
    "catchClause",
    "classBody",
    "classDeclaration",
    "classExpression",
    "classImplements",
    "classProperty",
    "classPropertyDefinition",
    "classStatement",
    "commentBlock",
    "commentLine",
    "comprehensionBlock",
    "comprehensionExpression",
    "comprehensionStatement",
    "conditionalExpression",
    "conditionalStatement",
    "continueStatement",
    "debuggerStatement",
    "declareClass",
    "declareFunction",
    "declareModule",
    "declareVariable",
    "decorator",
    "doExpression",
    "doStatement",
    "doWhileStatement",
    "emptyStatement",
    "exportAllDeclaration",
    "exportBatchSpecifier",
    "exportDeclaration",
    "exportDefaultDeclaration",
    "exportDefaultSpecifier",
    "exportNamedDeclaration",
    "exportNamespaceSpecifier",
    "exportSpecifier",
    "expressionStatement",
    "file",
    c("filters", ["JSXElement", "VariableDeclarator"]),
    "forInStatement",
    "forOfStatement",
    "forStatement",
    "functionDeclaration",
    "functionExpression",
    "functionStatement",
    "functionTypeAnnotation",
    "functionTypeParam",
    "generatorExpression",
    "generatorStatement",
    "genericTypeAnnotation",
    "graphExpression",
    "graphIndexExpression",
    "graphIndexStatement",
    "graphStatement",
    "identifier",
    "identifierStatement",
    "ifStatement",
    "importDeclaration",
    "importDefaultSpecifier",
    "importNamespaceSpecifier",
    "importSpecifier",
    "interfaceDeclaration",
    "interfaceExtends",
    "intersectionTypeAnnotation",
    "jsxAttribute",
    "jsxClosingElement",
    "jsxElement",
    "jsxElementStatement",
    "jsxEmptyExpression",
    "jsxEmptyStatement",
    "jsxExpressionContainer",
    "jsxExpressionContainerStatement",
    "jsxIdentifier",
    "jsxIdentifierStatement",
    "jsxMemberExpression",
    "jsxMemberStatement",
    "jsxNamespacedName",
    "jsxOpeningElement",
    "jsxSpreadAttribute",
    "jsxText",
    "jsxTextStatement",
    "labeledStatement",
    "letExpression",
    "letStatement",
    "line",
    "literal",
    "literalStatement",
    "logicalExpression",
    "logicalStatement",
    c("mappings", ["JSXElement"]),
    "match",
    "memberExpression",
    "memberStatement",
    "memberTypeAnnotation",
    "metaProperty",
    "metaPropertyStatement",
    "methodDefinition",
    "mixedTypeAnnotation",
    "newExpression",
    "newStatement",
    "noop",
    "nullableTypeAnnotation",
    "numberLiteralTypeAnnotation",
    "numberTypeAnnotation",
    "objectExpression",
    "objectPattern",
    "objectStatement",
    "objectTypeAnnotation",
    "objectTypeCallProperty",
    "objectTypeIndexer",
    "objectTypeProperty",
    "parenthesizedExpression",
    "parenthesizedStatement",
    "position",
    "program",
    "property",
    "propertyPattern",
    "qualifiedTypeIdentifier",
    "registerMethods",
    "restElement",
    "returnStatement",
    "sequenceExpression",
    "sequenceStatement",
    "sourceLocation",
    "spreadElement",
    "spreadElementPattern",
    "spreadProperty",
    "spreadPropertyPattern",
    "stringLiteralTypeAnnotation",
    "stringTypeAnnotation",
    "super",
    "superStatement",
    "switchCase",
    "switchStatement",
    "taggedTemplateExpression",
    "taggedTemplateStatement",
    "template",
    "templateElement",
    "templateLiteral",
    "templateLiteralStatement",
    "thisExpression",
    "thisStatement",
    "throwStatement",
    "tryStatement",
    "tupleTypeAnnotation",
    "typeAlias",
    "typeAnnotation",
    "typeCastExpression",
    "typeCastStatement",
    "typeParameterDeclaration",
    "typeParameterInstantiation",
    "typeofTypeAnnotation",
    c("types", [
      "NodePath",
      "PathVisitor",
      "Type",
      "astNodesAreEquivalent",
      "builders",
      "builtInTypes",
      "defineMethod",
      "eachField",
      "finalize",
      "getFieldNames",
      "getFieldValue",
      "getSupertypeNames",
      "namedTypes",
      "someField",
      "visit"
    ]),
    "unaryExpression",
    "unaryStatement",
    "unionTypeAnnotation",
    "updateExpression",
    "updateStatement",
    "variableDeclaration",
    "variableDeclarator",
    "voidTypeAnnotation",
    "whileStatement",
    "withStatement",
    "yieldExpression",
    "yieldStatement",
  ]
});
