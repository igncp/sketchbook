var d = diagrams.box.generateDefinition,
  c = diagrams.box.generateContainer,
  s = diagrams.shared.get;

diagrams.box({
  name: s('project') + ' generated core api',
  body: [
    c("cache", "/cache<br>", [
      c("backends", "/cache/backends<br>", [
        c("base.py", "/cache/backends/base.py<br> Base Cache class.", [
          c("BaseCache(object)", "/cache/backends/base.py<br>", [
            d("__contains__(self, key)"),
            d("__init__(self, params)"),
            d("add(self, key, value, timeout, version)"),
            d("clear(self)"),
            d("close(self)"),
            d("decr(self, key, delta, version)"),
            d("decr_version(self, key, delta, version)"),
            d("delete(self, key, version)"),
            d("delete_many(self, keys, version)"),
            d("get(self, key, default, version)"),
            d("get_backend_timeout(self, timeout)"),
            d("get_many(self, keys, version)"),
            d("get_or_set(self, key, default, timeout, version)"),
            d("has_key(self, key, version)"),
            d("incr(self, key, delta, version)"),
            d("incr_version(self, key, delta, version)"),
            d("make_key(self, key, version)"),
            d("set(self, key, value, timeout, version)"),
            d("set_many(self, data, timeout, version)"),
            d("validate_key(self, key)"),
          ]),
          c("CacheKeyWarning(DjangoRuntimeWarning)", "/cache/backends/base.py<br>", []),
          c("InvalidCacheBackendError(ImproperlyConfigured)", "/cache/backends/base.py<br>", []),
          d("default_key_func(key, key_prefix, version)", "Default function to generate keys.  Constructs the key used by all other methods. By default it prepends the `key_prefix'. KEY_FUNCTION can be used to specify an alternate function with custom key making behavior."),
          d("get_key_func(key_func)", "Function to decide which key function to use.  Defaults to ``default_key_func``."),
        ]),
        c("db.py", "/cache/backends/db.py<br> Database cache backend.", [
          c("BaseDatabaseCache(BaseCache)", "/cache/backends/db.py<br>", [
            d("__init__(self, table, params)"),
          ]),
          c("DatabaseCache(BaseDatabaseCache)", "/cache/backends/db.py<br>", [
            d("_base_set(self, mode, key, value, timeout)"),
            d("_cull(self, db, cursor, now)"),
            d("add(self, key, value, timeout, version)"),
            d("clear(self)"),
            d("delete(self, key, version)"),
            d("get(self, key, default, version)"),
            d("has_key(self, key, version)"),
            d("set(self, key, value, timeout, version)"),
          ]),
          c("Options(object)", "/cache/backends/db.py<br>A class that will quack like a Django model _meta class.  This allows cache operations to be controlled by the router", [
            d("__init__(self, table)"),
          ]),
        ]),
        c("dummy.py", "/cache/backends/dummy.py<br> Dummy cache backend", [
          c("DummyCache(BaseCache)", "/cache/backends/dummy.py<br>", [
            d("__init__(self, host)"),
            d("add(self, key, value, timeout, version)"),
            d("clear(self)"),
            d("delete(self, key, version)"),
            d("delete_many(self, keys, version)"),
            d("get(self, key, default, version)"),
            d("get_many(self, keys, version)"),
            d("has_key(self, key, version)"),
            d("set(self, key, value, timeout, version)"),
            d("set_many(self, data, timeout, version)"),
          ]),
        ]),
        c("filebased.py", "/cache/backends/filebased.py<br> File-based cache backend", [
          c("FileBasedCache(BaseCache)", "/cache/backends/filebased.py<br>", [
            d("__init__(self, dir, params)"),
            d("_createdir(self)"),
            d("_cull(self)"),
            d("_delete(self, fname)"),
            d("_is_expired(self, f)"),
            d("_key_to_file(self, key, version)"),
            d("_list_cache_files(self)"),
            d("add(self, key, value, timeout, version)"),
            d("clear(self)"),
            d("delete(self, key, version)"),
            d("get(self, key, default, version)"),
            d("has_key(self, key, version)"),
            d("set(self, key, value, timeout, version)"),
          ]),
        ]),
        c("locmem.py", "/cache/backends/locmem.py<br> Thread-safe in-memory cache backend.", [
          c("LocMemCache(BaseCache)", "/cache/backends/locmem.py<br>", [
            d("__init__(self, name, params)"),
            d("_cull(self)"),
            d("_delete(self, key)"),
            d("_has_expired(self, key)"),
            d("_set(self, key, value, timeout)"),
            d("add(self, key, value, timeout, version)"),
            d("clear(self)"),
            d("delete(self, key, version)"),
            d("get(self, key, default, version, acquire_lock)"),
            d("has_key(self, key, version)"),
            d("incr(self, key, delta, version)"),
            d("set(self, key, value, timeout, version)"),
          ]),
          d("dummy()", "A context manager that does nothing special."),
        ]),
        c("memcached.py", "/cache/backends/memcached.py<br> Memcached cache backend", [
          c("BaseMemcachedCache(BaseCache)", "/cache/backends/memcached.py<br>", [
            d("__init__(self, server, params, library, value_not_found_exception)"),
            d("_cache(self)"),
            d("add(self, key, value, timeout, version)"),
            d("clear(self)"),
            d("close(self)"),
            d("decr(self, key, delta, version)"),
            d("delete(self, key, version)"),
            d("delete_many(self, keys, version)"),
            d("get(self, key, default, version)"),
            d("get_backend_timeout(self, timeout)"),
            d("get_many(self, keys, version)"),
            d("incr(self, key, delta, version)"),
            d("make_key(self, key, version)"),
            d("set(self, key, value, timeout, version)"),
            d("set_many(self, data, timeout, version)"),
          ]),
          c("MemcachedCache(BaseMemcachedCache)", "/cache/backends/memcached.py<br>An implementation of a cache binding using python-memcached", [
            d("__init__(self, server, params)"),
            d("_cache(self)"),
          ]),
          c("PyLibMCCache(BaseMemcachedCache)", "/cache/backends/memcached.py<br>An implementation of a cache binding using pylibmc", [
            d("__init__(self, server, params)"),
            d("_cache(self)"),
          ]),
        ]),
      ]),
      c("utils.py", "/cache/utils.py<br>", [
        d("make_template_fragment_key(fragment_name, vary_on)"),
      ]),
      c("__init__.py", "/cache/__init__.py<br> Caching framework.  This package defines set of cache backends that all conform to a simple API. In a nutshell, a cache is a set of values -- which can be any object that may be pickled -- identified by string keys.  For the complete API, see the abstract BaseCache class in django.core.cache.backend...", [
        c("CacheHandler(object)", "/cache/__init__.py<br>A Cache Handler to manage access to Cache instances.  Ensures only one instance of each alias exists per thread.", [
          d("__getitem__(self, alias)"),
          d("__init__(self)"),
          d("all(self)"),
        ]),
        c("DefaultCacheProxy(object)", "/cache/__init__.py<br>Proxy access to the default Cache object's attributes.  This allows the legacy `cache` object to be thread-safe using the new ``caches`` API.", [
          d("__contains__(self, key)"),
          d("__delattr__(self, name)"),
          d("__eq__(self, other)"),
          d("__getattr__(self, name)"),
          d("__ne__(self, other)"),
          d("__setattr__(self, name, value)"),
        ]),
        d("_create_cache(backend)"),
        d("close_caches()"),
      ]),
    ]),
    c("checks", "/checks<br>", [
      c("compatibility", "/checks/compatibility<br>", [
        c("django_1_8_0.py", "/checks/compatibility/django_1_8_0.py<br>", [
          d("check_duplicate_template_settings(app_configs)"),
        ]),
      ]),
      c("security", "/checks/security<br>", [
        c("base.py", "/checks/security/base.py<br>", [
          d("_security_middleware()"),
          d("_xframe_middleware()"),
          d("check_allowed_hosts(app_configs)"),
          d("check_content_type_nosniff(app_configs)"),
          d("check_debug(app_configs)"),
          d("check_secret_key(app_configs)"),
          d("check_security_middleware(app_configs)"),
          d("check_ssl_redirect(app_configs)"),
          d("check_sts(app_configs)"),
          d("check_sts_include_subdomains(app_configs)"),
          d("check_xframe_deny(app_configs)"),
          d("check_xframe_options_middleware(app_configs)"),
          d("check_xss_filter(app_configs)"),
        ]),
        c("csrf.py", "/checks/security/csrf.py<br>", [
          d("_csrf_middleware()"),
          d("check_csrf_cookie_httponly(app_configs)"),
          d("check_csrf_cookie_secure(app_configs)"),
          d("check_csrf_middleware(app_configs)"),
        ]),
        c("sessions.py", "/checks/security/sessions.py<br>", [
          d("_session_app()"),
          d("_session_middleware()"),
          d("add_httponly_message(message)"),
          d("add_session_cookie_message(message)"),
          d("check_session_cookie_httponly(app_configs)"),
          d("check_session_cookie_secure(app_configs)"),
        ]),
      ]),
      c("caches.py", "/checks/caches.py<br>", [
        d("check_default_cache_is_configured(app_configs)"),
      ]),
      c("messages.py", "/checks/messages.py<br>", [
        c("CheckMessage(object)", "/checks/messages.py<br>", [
          d("__eq__(self, other)"),
          d("__init__(self, level, msg, hint, obj, id)"),
          d("__ne__(self, other)"),
          d("__repr__(self)"),
          d("__str__(self)"),
          d("is_serious(self)"),
          d("is_silenced(self)"),
        ]),
        c("Critical(CheckMessage)", "/checks/messages.py<br>", [
          d("__init__(self)"),
        ]),
        c("Debug(CheckMessage)", "/checks/messages.py<br>", [
          d("__init__(self)"),
        ]),
        c("Error(CheckMessage)", "/checks/messages.py<br>", [
          d("__init__(self)"),
        ]),
        c("Info(CheckMessage)", "/checks/messages.py<br>", [
          d("__init__(self)"),
        ]),
        c("Warning(CheckMessage)", "/checks/messages.py<br>", [
          d("__init__(self)"),
        ]),
      ]),
      c("model_checks.py", "/checks/model_checks.py<br>", [
        d("check_all_models(app_configs)"),
        d("check_model_signals(app_configs)", "Ensure lazily referenced model signals senders are installed."),
      ]),
      c("registry.py", "/checks/registry.py<br>", [
        c("CheckRegistry(object)", "/checks/registry.py<br>", [
          d("__init__(self)"),
          d("get_checks(self, include_deployment_checks)"),
          d("register(self, check)"),
          d("run_checks(self, app_configs, tags, include_deployment_checks)"),
          d("tag_exists(self, tag, include_deployment_checks)"),
          d("tags_available(self, deployment_checks)"),
        ]),
        c("Tags(object)", "/checks/registry.py<br>Built-in tags for internal checks.", []),
      ]),
      c("templates.py", "/checks/templates.py<br>", [
        d("check_setting_app_dirs_loaders(app_configs)"),
      ]),
      c("urls.py", "/checks/urls.py<br>", [
        d("check_include_trailing_dollar(pattern)", "Check that include is not used with a regex ending with a dollar."),
        d("check_pattern_name(pattern)", "Check that the pattern name does not contain a colon."),
        d("check_pattern_startswith_slash(pattern)", "Check that the pattern does not begin with a forward slash."),
        d("check_resolver(resolver)", "Recursively check the resolver."),
        d("check_url_config(app_configs)"),
        d("describe_pattern(pattern)", "Format the URL pattern for display in warning messages."),
      ]),
    ]),
    c("files", "/files<br>", [
      c("base.py", "/files/base.py<br>", [
        c("ContentFile(File)", "/files/base.py<br>A File-like object that takes just raw content, rather than an actual file.", [
          d("__bool__(self)"),
          d("__init__(self, content, name)"),
          d("__nonzero__(self)"),
          d("__str__(self)"),
          d("close(self)"),
          d("open(self, mode)"),
        ]),
        c("File(FileProxyMixin)", "/files/base.py<br>", [
          d("__bool__(self)"),
          d("__enter__(self)"),
          d("__exit__(self, exc_type, exc_value, tb)"),
          d("__init__(self, file, name)"),
          d("__iter__(self)"),
          d("__len__(self)"),
          d("__nonzero__(self)"),
          d("__repr__(self)"),
          d("__str__(self)"),
          d("_get_closed(self)"),
          d("_get_size(self)"),
          d("_get_size_from_underlying_file(self)"),
          d("_set_size(self, size)"),
          d("chunks(self, chunk_size)"),
          d("close(self)"),
          d("multiple_chunks(self, chunk_size)"),
          d("open(self, mode)"),
        ]),
        d("endswith_cr(line)", "Return True if line (a text or byte string) ends with ''."),
        d("endswith_lf(line)", "    Return True if line (a text or byte string) ends with ' '.     "),
        d("equals_lf(line)", "    Return True if line (a text or byte string) equals ' '.     "),
      ]),
      c("images.py", "/files/images.py<br> Utility functions for handling images.  Requires Pillow as you might imagine.", [
        c("ImageFile(File)", "/files/images.py<br>A mixin for use alongside django.core.files.base.File, which provides additional features for dealing with images.", [
          d("_get_height(self)"),
          d("_get_image_dimensions(self)"),
          d("_get_width(self)"),
        ]),
        d("get_image_dimensions(file_or_path, close)", "Returns the (width, height) of an image, given an open file or a path.  Set 'close' to True to close the file at the end if it is initially in an open state."),
      ]),
      c("locks.py", "/files/locks.py<br> Portable file locking utilities.  Based partially on an example by Jonathan Feignberg in the Python Cookbook [1] (licensed under the Python Software License) and a ctypes port by Anatoly Techtonik for Roundup [2] (license [3]).  [1] http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/65203 [2] h...", [
        d("_fd(f)", "Get a filedescriptor from something which could be a file or an fd."),
      ]),
      c("move.py", "/files/move.py<br> Move a file in the safest way possible::      >>> from django.core.files.move import file_move_safe     >>> file_move_safe('/tmp/old_file', '/tmp/new_file')", [
        d("_samefile(src, dst)"),
        d("file_move_safe(old_file_name, new_file_name, chunk_size, allow_overwrite)", "Moves a file from one location to another in the safest way possible.  First, tries ``os.rename``, which is simple but will break across filesystems. If that fails, streams manually from one file to another in pure Python.  If the destination file exists and ``allow_overwrite`` is ``False``, this fu..."),
      ]),
      c("storage.py", "/files/storage.py<br>", [
        c("DefaultStorage(LazyObject)", "/files/storage.py<br>", [
          d("_setup(self)"),
        ]),
        c("FileSystemStorage(Storage)", "/files/storage.py<br>Standard filesystem storage", [
          d("__init__(self, location, base_url, file_permissions_mode, directory_permissions_mode)"),
          d("_open(self, name, mode)"),
          d("_save(self, name, content)"),
          d("accessed_time(self, name)"),
          d("created_time(self, name)"),
          d("delete(self, name)"),
          d("exists(self, name)"),
          d("listdir(self, path)"),
          d("modified_time(self, name)"),
          d("path(self, name)"),
          d("size(self, name)"),
          d("url(self, name)"),
        ]),
        c("Storage(object)", "/files/storage.py<br>A base storage class, providing some default behaviors that all other storage systems can inherit or override, as necessary.", [
          d("accessed_time(self, name)"),
          d("created_time(self, name)"),
          d("delete(self, name)"),
          d("exists(self, name)"),
          d("get_available_name(self, name, max_length)"),
          d("get_valid_name(self, name)"),
          d("listdir(self, path)"),
          d("modified_time(self, name)"),
          d("open(self, name, mode)"),
          d("path(self, name)"),
          d("save(self, name, content, max_length)"),
          d("size(self, name)"),
          d("url(self, name)"),
        ]),
        d("get_storage_class(import_path)"),
      ]),
      c("uploadedfile.py", "/files/uploadedfile.py<br> Classes representing uploaded files.", [
        c("InMemoryUploadedFile(UploadedFile)", "/files/uploadedfile.py<br>A file uploaded into memory (i.e. stream-to-memory).", [
          d("__init__(self, file, field_name, name, content_type, size, charset, content_type_extra)"),
          d("chunks(self, chunk_size)"),
          d("multiple_chunks(self, chunk_size)"),
          d("open(self, mode)"),
        ]),
        c("SimpleUploadedFile(InMemoryUploadedFile)", "/files/uploadedfile.py<br>A simple representation of a file, which just has content, size, and a name.", [
          d("__init__(self, name, content, content_type)"),
          d("from_dict(cls, file_dict)"),
        ]),
        c("TemporaryUploadedFile(UploadedFile)", "/files/uploadedfile.py<br>A file uploaded to a temporary location (i.e. stream-to-disk).", [
          d("__init__(self, name, content_type, size, charset, content_type_extra)"),
          d("close(self)"),
          d("temporary_file_path(self)"),
        ]),
        c("UploadedFile(File)", "/files/uploadedfile.py<br>A abstract uploaded file (``TemporaryUploadedFile`` and ``InMemoryUploadedFile`` are the built-in concrete subclasses).  An ``UploadedFile`` object behaves somewhat like a file object and represents some file data that the user submitted with a form.", [
          d("__init__(self, file, name, content_type, size, charset, content_type_extra)"),
          d("__repr__(self)"),
          d("_get_name(self)"),
          d("_set_name(self, name)"),
        ]),
      ]),
      c("uploadhandler.py", "/files/uploadhandler.py<br> Base file upload handler classes, and the built-in concrete subclasses", [
        c("FileUploadHandler(object)", "/files/uploadhandler.py<br>Base class for streaming upload handlers.", [
          d("__init__(self, request)"),
          d("file_complete(self, file_size)"),
          d("handle_raw_input(self, input_data, META, content_length, boundary, encoding)"),
          d("new_file(self, field_name, file_name, content_type, content_length, charset, content_type_extra)"),
          d("receive_data_chunk(self, raw_data, start)"),
          d("upload_complete(self)"),
        ]),
        c("MemoryFileUploadHandler(FileUploadHandler)", "/files/uploadhandler.py<br>File upload handler to stream uploads into memory (used for small files).", [
          d("file_complete(self, file_size)"),
          d("handle_raw_input(self, input_data, META, content_length, boundary, encoding)"),
          d("new_file(self)"),
          d("receive_data_chunk(self, raw_data, start)"),
        ]),
        c("SkipFile(UploadFileException)", "/files/uploadhandler.py<br>This exception is raised by an upload handler that wants to skip a given file.", []),
        c("StopFutureHandlers(UploadFileException)", "/files/uploadhandler.py<br>Upload handers that have handled a file and do not want future handlers to run should raise this exception instead of returning None.", []),
        c("StopUpload(UploadFileException)", "/files/uploadhandler.py<br>This exception is raised when an upload must abort.", [
          d("__init__(self, connection_reset)"),
          d("__str__(self)"),
        ]),
        c("TemporaryFileUploadHandler(FileUploadHandler)", "/files/uploadhandler.py<br>Upload handler that streams data into a temporary file.", [
          d("__init__(self)"),
          d("file_complete(self, file_size)"),
          d("new_file(self)"),
          d("receive_data_chunk(self, raw_data, start)"),
        ]),
        c("UploadFileException(Exception)", "/files/uploadhandler.py<br>Any error having to do with uploading files.", []),
        d("load_handler(path)", "Given a path to a handler, return an instance of that handler.  E.g.::     >>> from django.http import HttpRequest     >>> request  HttpRequest()     >>> load_handler('django.core.files.uploadhandler.TemporaryFileUploadHandler', request)     <TemporaryFileUploadHandler object at 0x...>"),
      ]),
      c("utils.py", "/files/utils.py<br>", [
        c("FileProxyMixin(object)", "/files/utils.py<br>A mixin class used to forward file methods to an underlaying file object.  The internal file object has to be called 'file'::      class FileProxy(FileProxyMixin):         def __init__(self, file):             self.file  file", [
          d("__iter__(self)"),
        ]),
      ]),
    ]),
    c("handlers", "/handlers<br>", [
      c("base.py", "/handlers/base.py<br>", [
        c("BaseHandler(object)", "/handlers/base.py<br>", [
          d("__init__(self)"),
          d("apply_response_fixes(self, request, response)"),
          d("get_exception_response(self, request, resolver, status_code, exception)"),
          d("get_response(self, request)"),
          d("handle_uncaught_exception(self, request, resolver, exc_info)"),
          d("load_middleware(self)"),
          d("make_view_atomic(self, view)"),
          d("process_exception_by_middleware(self, exception, request)"),
        ]),
      ]),
      c("wsgi.py", "/handlers/wsgi.py<br>", [
        c("LimitedStream(object)", "/handlers/wsgi.py<br>LimitedStream wraps another stream in order to not allow reading from it past specified amount of bytes.", [
          d("__init__(self, stream, limit, buf_size)"),
          d("_read_limited(self, size)"),
          d("read(self, size)"),
          d("readline(self, size)"),
        ]),
        c("WSGIHandler()", "/handlers/wsgi.py<br>", [
          d("__call__(self, environ, start_response)"),
        ]),
        c("WSGIRequest()", "/handlers/wsgi.py<br>", [
          d("COOKIES(self)"),
          d("GET(self)"),
          d("__init__(self, environ)"),
          d("_get_files(self)"),
          d("_get_post(self)"),
          d("_get_scheme(self)"),
          d("_set_post(self, post)"),
        ]),
        d("get_bytes_from_wsgi(environ, key, default)", "Get a value from the WSGI environ dictionary as bytes.  key and default should be str objects. Under Python 2 they may also be unicode objects provided they only contain ASCII characters."),
        d("get_path_info(environ)", "Returns the HTTP request's PATH_INFO as a unicode string."),
        d("get_script_name(environ)", "Returns the equivalent of the HTTP request's SCRIPT_NAME environment variable. If Apache mod_rewrite has been used, returns what would have been the script name prior to any rewriting (so it's the script name as seen from the client's perspective), unless the FORCE_SCRIPT_NAME setting is set (to any..."),
        d("get_str_from_wsgi(environ, key, default)", "Get a value from the WSGI environ dictionary as str.  key and default should be str objects. Under Python 2 they may also be unicode objects provided they only contain ASCII characters."),
      ]),
    ]),
    c("mail", "/mail<br>", [
      c("backends", "/mail/backends<br>", [
        c("base.py", "/mail/backends/base.py<br> Base email backend class.", [
          c("BaseEmailBackend(object)", "/mail/backends/base.py<br> Base class for email backend implementations.   Subclasses must at least overwrite send_messages().  open() and close() can be called indirectly by using a backend object as a context manager:      with backend as connection:         # do something with connection         pass  ", [
            d("__enter__(self)"),
            d("__exit__(self, exc_type, exc_value, traceback)"),
            d("__init__(self, fail_silently)"),
            d("close(self)"),
            d("open(self)"),
            d("send_messages(self, email_messages)"),
          ]),
        ]),
        c("console.py", "/mail/backends/console.py<br> Email backend that writes messages to console instead of sending them.", [
          c("EmailBackend(BaseEmailBackend)", "/mail/backends/console.py<br>", [
            d("__init__(self)"),
            d("send_messages(self, email_messages)"),
            d("write_message(self, message)"),
          ]),
        ]),
        c("dummy.py", "/mail/backends/dummy.py<br> Dummy email backend that does nothing.", [
          c("EmailBackend(BaseEmailBackend)", "/mail/backends/dummy.py<br>", [
            d("send_messages(self, email_messages)"),
          ]),
        ]),
        c("filebased.py", "/mail/backends/filebased.py<br> Email backend that writes messages to a file.", [
          c("EmailBackend(ConsoleEmailBackend)", "/mail/backends/filebased.py<br>", [
            d("__init__(self)"),
            d("_get_filename(self)"),
            d("close(self)"),
            d("open(self)"),
            d("write_message(self, message)"),
          ]),
        ]),
        c("locmem.py", "/mail/backends/locmem.py<br> Backend for test environment.", [
          c("EmailBackend(BaseEmailBackend)", "/mail/backends/locmem.py<br>A email backend for use during test sessions.  The test connection stores email messages in a dummy outbox, rather than sending them out on the wire.  The dummy outbox is accessible through the outbox instance attribute.", [
            d("__init__(self)"),
            d("send_messages(self, messages)"),
          ]),
        ]),
        c("smtp.py", "/mail/backends/smtp.py<br> SMTP email backend class.", [
          c("EmailBackend(BaseEmailBackend)", "/mail/backends/smtp.py<br>A wrapper that manages the SMTP network connection.", [
            d("__init__(self, host, port, username, password, use_tls, fail_silently, use_ssl, timeout, ssl_keyfile, ssl_certfile)"),
            d("_send(self, email_message)"),
            d("close(self)"),
            d("open(self)"),
            d("send_messages(self, email_messages)"),
          ]),
        ]),
      ]),
      c("message.py", "/mail/message.py<br>", [
        c("BadHeaderError(ValueError)", "/mail/message.py<br>", []),
        c("EmailMessage(object)", "/mail/message.py<br>A container for email information.", [
          d("__init__(self, subject, body, from_email, to, bcc, connection, attachments, headers, cc, reply_to)"),
          d("_create_attachment(self, filename, content, mimetype)"),
          d("_create_attachments(self, msg)"),
          d("_create_message(self, msg)"),
          d("_create_mime_attachment(self, content, mimetype)"),
          d("attach(self, filename, content, mimetype)"),
          d("attach_file(self, path, mimetype)"),
          d("get_connection(self, fail_silently)"),
          d("message(self)"),
          d("recipients(self)"),
          d("send(self, fail_silently)"),
        ]),
        c("EmailMultiAlternatives(EmailMessage)", "/mail/message.py<br>A version of EmailMessage that makes it easy to send multipart/alternative messages. For example, including text and HTML versions of the text is made easier.", [
          d("__init__(self, subject, body, from_email, to, bcc, connection, attachments, headers, alternatives, cc, reply_to)"),
          d("_create_alternatives(self, msg)"),
          d("_create_message(self, msg)"),
          d("attach_alternative(self, content, mimetype)"),
        ]),
        c("MIMEMixin()", "/mail/message.py<br>", [
          d("as_string(self, unixfrom, linesep)"),
        ]),
        c("SafeMIMEMessage(MIMEMixin, MIMEMessage)", "/mail/message.py<br>", [
          d("__setitem__(self, name, val)"),
        ]),
        c("SafeMIMEMultipart(MIMEMixin, MIMEMultipart)", "/mail/message.py<br>", [
          d("__init__(self, _subtype, boundary, _subparts, encoding)"),
          d("__setitem__(self, name, val)"),
        ]),
        c("SafeMIMEText(MIMEMixin, MIMEText)", "/mail/message.py<br>", [
          d("__init__(self, _text, _subtype, _charset)"),
          d("__setitem__(self, name, val)"),
        ]),
        d("forbid_multi_line_headers(name, val, encoding)", "Forbids multi-line headers, to prevent header injection."),
        d("make_msgid(idstring, domain)", "Returns a string suitable for RFC 2822 compliant Message-ID, e.g:  <20020201195627.33539.96671@nightshade.la.mastaler.com>  Optional idstring if given is a string used to strengthen the uniqueness of the message id.  Optional domain if given provides the portion of the message id after the '@'.  It ..."),
        d("sanitize_address(addr, encoding)"),
      ]),
      c("utils.py", "/mail/utils.py<br> Email message and email sending related helper functions.", [
        c("CachedDnsName(object)", "/mail/utils.py<br>", [
          d("__str__(self)"),
          d("get_fqdn(self)"),
        ]),
      ]),
      c("__init__.py", "/mail/__init__.py<br> Tools for sending email.", [
        d("get_connection(backend, fail_silently)", "Load an email backend and return an instance of it.  If backend is None (default) settings.EMAIL_BACKEND is used.  Both fail_silently and other keyword arguments are used in the constructor of the backend."),
        d("mail_admins(subject, message, fail_silently, connection, html_message)", "Sends a message to the admins, as defined by the ADMINS setting."),
        d("mail_managers(subject, message, fail_silently, connection, html_message)", "Sends a message to the managers, as defined by the MANAGERS setting."),
        d("send_mail(subject, message, from_email, recipient_list, fail_silently, auth_user, auth_password, connection, html_message)", "Easy wrapper for sending a single message to a recipient list. All members of the recipient list will see the other recipients in the 'To' field.  If auth_user is None, the EMAIL_HOST_USER setting is used. If auth_password is None, the EMAIL_HOST_PASSWORD setting is used.  Note: The API for this met..."),
        d("send_mass_mail(datatuple, fail_silently, auth_user, auth_password, connection)", "Given a datatuple of (subject, message, from_email, recipient_list), sends each message to each recipient list. Returns the number of emails sent.  If from_email is None, the DEFAULT_FROM_EMAIL setting is used. If auth_user and auth_password are set, they're used to log in. If auth_user is None, the..."),
      ]),
    ]),
    c("management", "/management<br>", [
      c("commands", "/management/commands<br>", [
        c("check.py", "/management/commands/check.py<br>", [
          c("Command(BaseCommand)", "/management/commands/check.py<br>", [
            d("add_arguments(self, parser)"),
            d("handle(self)"),
          ]),
        ]),
        c("compilemessages.py", "/management/commands/compilemessages.py<br>", [
          c("Command(BaseCommand)", "/management/commands/compilemessages.py<br>", [
            d("add_arguments(self, parser)"),
            d("compile_messages(self, locations)"),
            d("handle(self)"),
          ]),
          d("has_bom(fn)"),
          d("is_writable(path)"),
        ]),
        c("createcachetable.py", "/management/commands/createcachetable.py<br>", [
          c("Command(BaseCommand)", "/management/commands/createcachetable.py<br>", [
            d("add_arguments(self, parser)"),
            d("create_table(self, database, tablename, dry_run)"),
            d("handle(self)"),
          ]),
        ]),
        c("dbshell.py", "/management/commands/dbshell.py<br>", [
          c("Command(BaseCommand)", "/management/commands/dbshell.py<br>", [
            d("add_arguments(self, parser)"),
            d("handle(self)"),
          ]),
        ]),
        c("diffsettings.py", "/management/commands/diffsettings.py<br>", [
          c("Command(BaseCommand)", "/management/commands/diffsettings.py<br>", [
            d("add_arguments(self, parser)"),
            d("handle(self)"),
          ]),
          d("module_to_dict(module, omittable)", "Converts a module namespace to a Python dictionary."),
        ]),
        c("dumpdata.py", "/management/commands/dumpdata.py<br>", [
          c("Command(BaseCommand)", "/management/commands/dumpdata.py<br>", [
            d("add_arguments(self, parser)"),
            d("handle(self)"),
          ]),
        ]),
        c("flush.py", "/management/commands/flush.py<br>", [
          c("Command(BaseCommand)", "/management/commands/flush.py<br>", [
            d("add_arguments(self, parser)"),
            d("handle(self)"),
          ]),
        ]),
        c("inspectdb.py", "/management/commands/inspectdb.py<br>", [
          c("Command(BaseCommand)", "/management/commands/inspectdb.py<br>", [
            d("add_arguments(self, parser)"),
            d("get_field_type(self, connection, table_name, row)"),
            d("get_meta(self, table_name, constraints, column_to_field_name)"),
            d("handle(self)"),
            d("handle_inspection(self, options)"),
            d("normalize_col_name(self, col_name, used_column_names, is_relation)"),
          ]),
        ]),
        c("loaddata.py", "/management/commands/loaddata.py<br>", [
          c("Command(BaseCommand)", "/management/commands/loaddata.py<br>", [
            d("add_arguments(self, parser)"),
            d("find_fixtures(self, fixture_label)"),
            d("fixture_dirs(self)"),
            d("handle(self)"),
            d("load_label(self, fixture_label)"),
            d("loaddata(self, fixture_labels)"),
            d("parse_name(self, fixture_name)"),
          ]),
          c("SingleZipReader()", "/management/commands/loaddata.py<br>", [
            d("__init__(self)"),
            d("read(self)"),
          ]),
          d("humanize(dirname)"),
        ]),
        c("makemessages.py", "/management/commands/makemessages.py<br>", [
          c("BuildFile(object)", "/management/commands/makemessages.py<br>Represents the state of a translatable file during the build process.", [
            d("__init__(self, command, domain, translatable)"),
            d("cleanup(self)"),
            d("is_templatized(self)"),
            d("path(self)"),
            d("postprocess_messages(self, msgs)"),
            d("preprocess(self)"),
            d("work_path(self)"),
          ]),
          c("Command(BaseCommand)", "/management/commands/makemessages.py<br>", [
            d("add_arguments(self, parser)"),
            d("build_potfiles(self)"),
            d("copy_plural_forms(self, msgs, locale)"),
            d("find_files(self, root)"),
            d("gettext_version(self)"),
            d("handle(self)"),
            d("process_files(self, file_list)"),
            d("process_locale_dir(self, locale_dir, files)"),
            d("remove_potfiles(self)"),
            d("write_po_file(self, potfile, locale)"),
          ]),
          c("TranslatableFile(object)", "/management/commands/makemessages.py<br>", [
            d("__eq__(self, other)"),
            d("__init__(self, dirpath, file_name, locale_dir)"),
            d("__lt__(self, other)"),
            d("__repr__(self)"),
            d("path(self)"),
          ]),
          d("check_programs()"),
          d("gettext_popen_wrapper(args, os_err_exc_type, stdout_encoding)", "Makes sure text obtained from stdout of gettext utilities is Unicode."),
          d("write_pot_file(potfile, msgs)", "Write the :param potfile: POT file with the :param msgs: contents, previously making sure its format is valid."),
        ]),
        c("makemigrations.py", "/management/commands/makemigrations.py<br>", [
          c("Command(BaseCommand)", "/management/commands/makemigrations.py<br>", [
            d("add_arguments(self, parser)"),
            d("handle(self)"),
            d("handle_merge(self, loader, conflicts)"),
            d("write_migration_files(self, changes)"),
          ]),
        ]),
        c("migrate.py", "/management/commands/migrate.py<br>", [
          c("Command(BaseCommand)", "/management/commands/migrate.py<br>", [
            d("add_arguments(self, parser)"),
            d("handle(self)"),
            d("migration_progress_callback(self, action, migration, fake)"),
            d("sync_apps(self, connection, app_labels)"),
          ]),
        ]),
        c("runserver.py", "/management/commands/runserver.py<br>", [
          c("Command(BaseCommand)", "/management/commands/runserver.py<br>", [
            d("add_arguments(self, parser)"),
            d("check_migrations(self)"),
            d("execute(self)"),
            d("get_handler(self)"),
            d("handle(self)"),
            d("inner_run(self)"),
            d("run(self)"),
          ]),
        ]),
        c("sendtestemail.py", "/management/commands/sendtestemail.py<br>", [
          c("Command(BaseCommand)", "/management/commands/sendtestemail.py<br>", [
            d("add_arguments(self, parser)"),
            d("handle(self)"),
          ]),
        ]),
        c("shell.py", "/management/commands/shell.py<br>", [
          c("Command(BaseCommand)", "/management/commands/shell.py<br>", [
            d("_ipython(self)"),
            d("_ipython_pre_011(self)"),
            d("_ipython_pre_100(self)"),
            d("add_arguments(self, parser)"),
            d("bpython(self)"),
            d("handle(self)"),
            d("ipython(self)"),
            d("run_shell(self, shell)"),
          ]),
        ]),
        c("showmigrations.py", "/management/commands/showmigrations.py<br>", [
          c("Command(BaseCommand)", "/management/commands/showmigrations.py<br>", [
            d("add_arguments(self, parser)"),
            d("handle(self)"),
            d("show_list(self, connection, app_names)"),
            d("show_plan(self, connection)"),
          ]),
        ]),
        c("sqlflush.py", "/management/commands/sqlflush.py<br>", [
          c("Command(BaseCommand)", "/management/commands/sqlflush.py<br>", [
            d("add_arguments(self, parser)"),
            d("handle(self)"),
          ]),
        ]),
        c("sqlmigrate.py", "/management/commands/sqlmigrate.py<br>", [
          c("Command(BaseCommand)", "/management/commands/sqlmigrate.py<br>", [
            d("add_arguments(self, parser)"),
            d("execute(self)"),
            d("handle(self)"),
          ]),
        ]),
        c("sqlsequencereset.py", "/management/commands/sqlsequencereset.py<br>", [
          c("Command(AppCommand)", "/management/commands/sqlsequencereset.py<br>", [
            d("add_arguments(self, parser)"),
            d("handle_app_config(self, app_config)"),
          ]),
        ]),
        c("squashmigrations.py", "/management/commands/squashmigrations.py<br>", [
          c("Command(BaseCommand)", "/management/commands/squashmigrations.py<br>", [
            d("add_arguments(self, parser)"),
            d("find_migration(self, loader, app_label, name)"),
            d("handle(self)"),
          ]),
        ]),
        c("startapp.py", "/management/commands/startapp.py<br>", [
          c("Command(TemplateCommand)", "/management/commands/startapp.py<br>", [
            d("handle(self)"),
          ]),
        ]),
        c("startproject.py", "/management/commands/startproject.py<br>", [
          c("Command(TemplateCommand)", "/management/commands/startproject.py<br>", [
            d("handle(self)"),
          ]),
        ]),
        c("test.py", "/management/commands/test.py<br>", [
          c("Command(BaseCommand)", "/management/commands/test.py<br>", [
            d("__init__(self)"),
            d("add_arguments(self, parser)"),
            d("execute(self)"),
            d("handle(self)"),
            d("run_from_argv(self, argv)"),
          ]),
        ]),
        c("testserver.py", "/management/commands/testserver.py<br>", [
          c("Command(BaseCommand)", "/management/commands/testserver.py<br>", [
            d("add_arguments(self, parser)"),
            d("handle(self)"),
          ]),
        ]),
      ]),
      c("base.py", "/management/base.py<br> Base classes for writing management commands (named commands which can be executed through ``django-admin`` or ``manage.py``).", [
        c("AppCommand(BaseCommand)", "/management/base.py<br>A management command which takes one or more installed application labels as arguments, and does something with each of them.  Rather than implementing ``handle()``, subclasses must implement ``handle_app_config()``, which will be called once for each application.", [
          d("add_arguments(self, parser)"),
          d("handle(self)"),
          d("handle_app_config(self, app_config)"),
        ]),
        c("BaseCommand(object)", "/management/base.py<br>The base class from which all management commands ultimately derive.  Use this class if you want access to all of the mechanisms which parse the command-line arguments and work out what code to call in response; if you don't need to change any of that behavior, consider using one of the subclasses d...", [
          d("__init__(self, stdout, stderr, no_color)"),
          d("add_arguments(self, parser)"),
          d("check(self, app_configs, tags, display_num_errors, include_deployment_checks)"),
          d("create_parser(self, prog_name, subcommand)"),
          d("execute(self)"),
          d("get_version(self)"),
          d("handle(self)"),
          d("print_help(self, prog_name, subcommand)"),
          d("run_from_argv(self, argv)"),
          d("usage(self, subcommand)"),
          d("use_argparse(self)"),
        ]),
        c("CommandError(Exception)", "/management/base.py<br>Exception class indicating a problem while executing a management command.  If this exception is raised during the execution of a management command, it will be caught and turned into a nicely-printed error message to the appropriate output stream (i.e., stderr); as a result, raising this exception ...", []),
        c("CommandParser(ArgumentParser)", "/management/base.py<br>Customized ArgumentParser class to improve some error messages and prevent SystemExit in several occasions, as SystemExit is unacceptable when a command is called programmatically.", [
          d("__init__(self, cmd)"),
          d("error(self, message)"),
          d("parse_args(self, args, namespace)"),
        ]),
        c("LabelCommand(BaseCommand)", "/management/base.py<br>A management command which takes one or more arbitrary arguments (labels) on the command line, and does something with each of them.  Rather than implementing ``handle()``, subclasses must implement ``handle_label()``, which will be called once for each label.  If the arguments should be names of in...", [
          d("add_arguments(self, parser)"),
          d("handle(self)"),
          d("handle_label(self, label)"),
        ]),
        c("NoArgsCommand(BaseCommand)", "/management/base.py<br>A command which takes no arguments on the command line.  Rather than implementing ``handle()``, subclasses must implement ``handle_noargs()``; ``handle()`` itself is overridden to ensure no arguments are passed to the command.  Attempting to pass arguments will raise ``CommandError``.", [
          d("__init__(self)"),
          d("handle(self)"),
          d("handle_noargs(self)"),
        ]),
        c("OutputWrapper(object)", "/management/base.py<br>Wrapper around stdout/stderr", [
          d("__getattr__(self, name)"),
          d("__init__(self, out, style_func, ending)"),
          d("isatty(self)"),
          d("style_func(self)"),
          d("style_func(self, style_func)"),
          d("write(self, msg, style_func, ending)"),
        ]),
        c("SystemCheckError(CommandError)", "/management/base.py<br>The system check framework detected unrecoverable errors.", []),
        d("handle_default_options(options)", "Include any default options that all commands should accept here so that ManagementUtility can handle them before searching for user commands."),
      ]),
      c("color.py", "/management/color.py<br> Sets up the terminal color scheme.", [
        c("Style(object)", "/management/color.py<br>", []),
        d("color_style()", "Returns a Style object from the Django color scheme."),
        d("make_style(config_string)", "Create a Style object from the given config_string.  If config_string is empty django.utils.termcolors.DEFAULT_PALETTE is used."),
        d("no_style()", "Returns a Style object with no color scheme."),
        d("supports_color()", "Returns True if the running system's terminal supports color, and False otherwise."),
      ]),
      c("sql.py", "/management/sql.py<br>", [
        d("emit_post_migrate_signal(verbosity, interactive, db)"),
        d("emit_pre_migrate_signal(verbosity, interactive, db)"),
        d("sql_flush(style, connection, only_django, reset_sequences, allow_cascade)", "Returns a list of the SQL statements used to flush the database.  If only_django is True, then only table names that have associated Django models and are in INSTALLED_APPS will be included."),
      ]),
      c("templates.py", "/management/templates.py<br>", [
        c("TemplateCommand(BaseCommand)", "/management/templates.py<br>Copies either a Django application layout template or a Django project layout template into the specified directory.  :param style: A color style object (see django.core.management.color). :param app_or_project: The string 'app' or 'project'. :param name: The name of the application or project. :par...", [
          d("add_arguments(self, parser)"),
          d("download(self, url)"),
          d("extract(self, filename)"),
          d("handle(self, app_or_project, name, target)"),
          d("handle_template(self, template, subdir)"),
          d("is_url(self, template)"),
          d("make_writeable(self, filename)"),
          d("splitext(self, the_path)"),
          d("validate_name(self, name, app_or_project)"),
        ]),
      ]),
      c("utils.py", "/management/utils.py<br>", [
        d("find_command(cmd, path, pathext)"),
        d("handle_extensions(extensions)", "Organizes multiple extensions that are separated with commas or passed by using --extension/-e multiple times.  For example: running 'django-admin makemessages -e js,txt -e xhtml -a' would result in an extension list: ['.js', '.txt', '.xhtml']  >>> handle_extensions(['.html', 'html,js,py,py,py,.py',..."),
        d("popen_wrapper(args, os_err_exc_type, universal_newlines)", "Friendly wrapper around Popen.  Returns stdout output, stderr output and OS status code."),
      ]),
      c("__init__.py", "/management/__init__.py<br>", [
        c("ManagementUtility(object)", "/management/__init__.py<br>Encapsulates the logic of the django-admin and manage.py utilities.  A ManagementUtility has a number of commands, which can be manipulated by editing the self.commands dictionary.", [
          d("__init__(self, argv)"),
          d("autocomplete(self)"),
          d("execute(self)"),
          d("fetch_command(self, subcommand)"),
          d("main_help_text(self, commands_only)"),
        ]),
        d("call_command(name)", "Calls the given command, with the given options and args/kwargs.  This is the primary API you should use for calling specific commands.  Some examples:     call_command('migrate')     call_command('shell', plainTrue)     call_command('sqlmigrate', 'myapp')"),
        d("execute_from_command_line(argv)", "A simple method that runs a ManagementUtility."),
        d("find_commands(management_dir)", "Given a path to a management directory, returns a list of all the command names that are available.  Returns an empty list if no commands are defined."),
        d("get_commands()", "Returns a dictionary mapping command names to their callback applications.  This works by looking for a management.commands package in django.core, and in each installed application -- if a commands package exists, all commands in that package are registered.  Core commands are always included. If a..."),
        d("load_command_class(app_name, name)", "Given a command name and an application name, returns the Command class instance. All errors raised by the import process (ImportError, AttributeError) are allowed to propagate."),
      ]),
    ]),
    c("serializers", "/serializers<br>", [
      c("base.py", "/serializers/base.py<br> Module for abstract serializer/unserializer base classes.", [
        c("DeserializationError(Exception)", "/serializers/base.py<br>Something bad happened during deserialization.", [
          d("WithData(cls, original_exc, model, fk, field_value)"),
        ]),
        c("DeserializedObject(object)", "/serializers/base.py<br>A deserialized model.  Basically a container for holding the pre-saved deserialized data along with the many-to-many data saved with the object.  Call ``save()`` to save the object (with the many-to-many data) to the database; call ``save(save_m2mFalse)`` to save just the object fields (and not touc...", [
          d("__init__(self, obj, m2m_data)"),
          d("__repr__(self)"),
          d("save(self, save_m2m, using)"),
        ]),
        c("Deserializer()", "/serializers/base.py<br>Abstract base deserializer class.", [
          d("__init__(self, stream_or_string)"),
          d("__iter__(self)"),
          d("__next__(self)"),
        ]),
        c("ProgressBar(object)", "/serializers/base.py<br>", [
          d("__init__(self, output, total_count)"),
          d("update(self, count)"),
        ]),
        c("SerializationError(Exception)", "/serializers/base.py<br>Something bad happened during serialization.", []),
        c("Serializer(object)", "/serializers/base.py<br>Abstract serializer base class.", [
          d("end_object(self, obj)"),
          d("end_serialization(self)"),
          d("getvalue(self)"),
          d("handle_field(self, obj, field)"),
          d("handle_fk_field(self, obj, field)"),
          d("handle_m2m_field(self, obj, field)"),
          d("serialize(self, queryset)"),
          d("start_object(self, obj)"),
          d("start_serialization(self)"),
        ]),
        c("SerializerDoesNotExist(KeyError)", "/serializers/base.py<br>The requested serializer was not found.", []),
        d("build_instance(Model, data, db)", "Build a model instance.  If the model instance doesn't have a primary key and the model supports natural keys, try to retrieve it from the database."),
      ]),
      c("json.py", "/serializers/json.py<br> Serialize data to/from JSON", [
        d("Deserializer(stream_or_string)", "Deserialize a stream or string of JSON data."),
        c("DjangoJSONEncoder()", "/serializers/json.py<br>JSONEncoder subclass that knows how to encode date/time, decimal types and UUIDs.", [
          d("default(self, o)"),
        ]),
        c("Serializer(PythonSerializer)", "/serializers/json.py<br>Convert a queryset to JSON.", [
          d("_init_options(self)"),
          d("end_object(self, obj)"),
          d("end_serialization(self)"),
          d("getvalue(self)"),
          d("start_serialization(self)"),
        ]),
      ]),
      c("python.py", "/serializers/python.py<br> A Python 'serializer'. Doesn't do much serializing per se -- just converts to and from basic Python data types (lists, dicts, strings, etc.). Useful as a basis for other serializers.", [
        d("Deserializer(object_list)", "Deserialize simple Python objects back into Django ORM instances.  It's expected that you pass the Python objects themselves (instead of a stream or a string) to the constructor"),
        c("Serializer()", "/serializers/python.py<br>Serializes a QuerySet to basic Python objects.", [
          d("end_object(self, obj)"),
          d("end_serialization(self)"),
          d("get_dump_object(self, obj)"),
          d("getvalue(self)"),
          d("handle_field(self, obj, field)"),
          d("handle_fk_field(self, obj, field)"),
          d("handle_m2m_field(self, obj, field)"),
          d("start_object(self, obj)"),
          d("start_serialization(self)"),
        ]),
        d("_get_model(model_identifier)", "Helper to look up a model from an 'app_label.model_name' string."),
      ]),
      c("pyyaml.py", "/serializers/pyyaml.py<br> YAML serializer.  Requires PyYaml (http://pyyaml.org/), but that's checked for in __init__.", [
        d("Deserializer(stream_or_string)", "Deserialize a stream or string of YAML data."),
        c("DjangoSafeDumper(SafeDumper)", "/serializers/pyyaml.py<br>", [
          d("represent_decimal(self, data)"),
          d("represent_ordered_dict(self, data)"),
        ]),
        c("Serializer(PythonSerializer)", "/serializers/pyyaml.py<br>Convert a queryset to YAML.", [
          d("end_serialization(self)"),
          d("getvalue(self)"),
          d("handle_field(self, obj, field)"),
        ]),
      ]),
      c("xml_serializer.py", "/serializers/xml_serializer.py<br> XML serializer.", [
        c("DTDForbidden(DefusedXmlException)", "/serializers/xml_serializer.py<br>Document type definition is forbidden.", [
          d("__init__(self, name, sysid, pubid)"),
          d("__str__(self)"),
        ]),
        c("DefusedExpatParser(_ExpatParser)", "/serializers/xml_serializer.py<br>An expat parser hardened against XML bomb attacks.  Forbids DTDs, external entity references", [
          d("__init__(self)"),
          d("entity_decl(self, name, is_parameter_entity, value, base, sysid, pubid, notation_name)"),
          d("external_entity_ref_handler(self, context, base, sysid, pubid)"),
          d("reset(self)"),
          d("start_doctype_decl(self, name, sysid, pubid, has_internal_subset)"),
          d("unparsed_entity_decl(self, name, base, sysid, pubid, notation_name)"),
        ]),
        c("DefusedXmlException(ValueError)", "/serializers/xml_serializer.py<br>Base exception.", [
          d("__repr__(self)"),
        ]),
        c("Deserializer()", "/serializers/xml_serializer.py<br>Deserialize XML.", [
          d("__init__(self, stream_or_string)"),
          d("__next__(self)"),
          d("_get_model_from_node(self, node, attr)"),
          d("_handle_fk_field_node(self, node, field)"),
          d("_handle_m2m_field_node(self, node, field)"),
          d("_handle_object(self, node)"),
          d("_make_parser(self)"),
        ]),
        c("EntitiesForbidden(DefusedXmlException)", "/serializers/xml_serializer.py<br>Entity definition is forbidden.", [
          d("__init__(self, name, value, base, sysid, pubid, notation_name)"),
          d("__str__(self)"),
        ]),
        c("ExternalReferenceForbidden(DefusedXmlException)", "/serializers/xml_serializer.py<br>Resolving an external reference is forbidden.", [
          d("__init__(self, context, base, sysid, pubid)"),
          d("__str__(self)"),
        ]),
        c("Serializer()", "/serializers/xml_serializer.py<br>Serializes a QuerySet to XML.", [
          d("_start_relational_field(self, field)"),
          d("end_object(self, obj)"),
          d("end_serialization(self)"),
          d("handle_field(self, obj, field)"),
          d("handle_fk_field(self, obj, field)"),
          d("handle_m2m_field(self, obj, field)"),
          d("indent(self, level)"),
          d("start_object(self, obj)"),
          d("start_serialization(self)"),
        ]),
        d("getInnerText(node)", "Get all the inner text of a DOM node (recursively)."),
      ]),
      c("__init__.py", "/serializers/__init__.py<br> Interfaces for serializing Django objects.  Usage::      from django.core import serializers     json  serializers.serialize('json', some_queryset)     objects  list(serializers.deserialize('json', json))  To add your own serializers, use the SERIALIZATION_MODULES setting::      SERIALIZATION_MODULE...", [
        c("BadSerializer(object)", "/serializers/__init__.py<br>Stub serializer to hold exception raised during registration  This allows the serializer registration to cache serializers and if there is an error raised in the process of creating a serializer it will be raised and passed along to the caller when the serializer is used.", [
          d("__call__(self)"),
          d("__init__(self, exception)"),
        ]),
        d("_load_serializers()", "Register built-in and settings-defined serializers. This is done lazily so that user code has a chance to (e.g.) set up custom settings without needing to be careful of import order."),
        d("deserialize(format, stream_or_string)", "Deserialize a stream or a string. Returns an iterator that yields ``(obj, m2m_relation_dict)``, where ``obj`` is an instantiated -- but *unsaved* -- object, and ``m2m_relation_dict`` is a dictionary of ``{m2m_field_name : list_of_related_objects}``."),
        d("get_deserializer(format)"),
        d("get_public_serializer_formats()"),
        d("get_serializer(format)"),
        d("get_serializer_formats()"),
        d("register_serializer(format, serializer_module, serializers)", "Register a new serializer.  ``serializer_module`` should be the fully qualified module name for the serializer.  If ``serializers`` is provided, the registration will be added to the provided dictionary.  If ``serializers`` is not provided, the registration will be made directly into the global regi..."),
        d("serialize(format, queryset)", "Serialize a queryset (or any iterator that returns database objects) using a certain serializer."),
        d("sort_dependencies(app_list)", "Sort a list of (app_config, models) pairs into a single list of models.  The single list of models is sorted so that any model with a natural key is serialized before a normal model, and any model with a natural key dependency has it's dependencies serialized first."),
        d("unregister_serializer(format)", "Unregister a given serializer. This is not a thread-safe operation."),
      ]),
    ]),
    c("servers", "/servers<br>", [
      c("basehttp.py", "/servers/basehttp.py<br> HTTP server that implements the Python WSGI protocol (PEP 333, rev 1.21).  Based on wsgiref.simple_server which is part of the standard library since 2.5.  This is a simple server for use in testing or debugging Django apps. It hasn't been reviewed for security issues. DON'T USE IT FOR PRODUCTION US...", [
        c("ServerHandler(object)", "/servers/basehttp.py<br>", [
          d("handle_error(self)"),
        ]),
        c("WSGIRequestHandler(object)", "/servers/basehttp.py<br>", [
          d("__init__(self)"),
          d("address_string(self)"),
          d("get_environ(self)"),
          d("handle(self)"),
          d("log_message(self, format)"),
        ]),
        c("WSGIServer(object)", "/servers/basehttp.py<br>BaseHTTPServer that implements the Python WSGI protocol", [
          d("__init__(self)"),
          d("handle_error(self, request, client_address)"),
          d("server_bind(self)"),
        ]),
        d("get_internal_wsgi_application()", "Loads and returns the WSGI application as configured by the user in ``settings.WSGI_APPLICATION``. With the default ``startproject`` layout, this will be the ``application`` object in ``projectname/wsgi.py``.  This function, and the ``WSGI_APPLICATION`` setting itself, are only useful for Django's i..."),
        d("is_broken_pipe_error()"),
        d("run(addr, port, wsgi_handler, ipv6, threading)"),
      ]),
    ]),
    c("exceptions.py", "/exceptions.py<br> Global Django exception and warning classes.", [
      c("AppRegistryNotReady(Exception)", "/exceptions.py<br>The django.apps registry is not populated yet", []),
      c("DisallowedHost(SuspiciousOperation)", "/exceptions.py<br>HTTP_HOST header contains invalid value", []),
      c("DisallowedRedirect(SuspiciousOperation)", "/exceptions.py<br>Redirect to scheme not in allowed list", []),
      c("DjangoRuntimeWarning(RuntimeWarning)", "/exceptions.py<br>", []),
      c("FieldDoesNotExist(Exception)", "/exceptions.py<br>The requested model field does not exist", []),
      c("FieldError(Exception)", "/exceptions.py<br>Some kind of problem with a model field.", []),
      c("ImproperlyConfigured(Exception)", "/exceptions.py<br>Django is somehow improperly configured", []),
      c("MiddlewareNotUsed(Exception)", "/exceptions.py<br>This middleware is not used in this server configuration", []),
      c("MultipleObjectsReturned(Exception)", "/exceptions.py<br>The query returned multiple objects when only one was expected.", []),
      c("ObjectDoesNotExist(Exception)", "/exceptions.py<br>The requested object does not exist", []),
      c("PermissionDenied(Exception)", "/exceptions.py<br>The user did not have permission to do that", []),
      c("SuspiciousFileOperation(SuspiciousOperation)", "/exceptions.py<br>A Suspicious filesystem operation was attempted", []),
      c("SuspiciousMultipartForm(SuspiciousOperation)", "/exceptions.py<br>Suspect MIME request in multipart form data", []),
      c("SuspiciousOperation(Exception)", "/exceptions.py<br>The user did something suspicious", []),
      c("ValidationError(Exception)", "/exceptions.py<br>An error while validating data.", [
        d("__init__(self, message, code, params)"),
        d("__iter__(self)"),
        d("__repr__(self)"),
        d("__str__(self)"),
        d("message_dict(self)"),
        d("messages(self)"),
        d("update_error_dict(self, error_dict)"),
      ]),
      c("ViewDoesNotExist(Exception)", "/exceptions.py<br>The requested view does not exist", []),
    ]),
    c("paginator.py", "/paginator.py<br>", [
      c("EmptyPage(InvalidPage)", "/paginator.py<br>", []),
      c("InvalidPage(Exception)", "/paginator.py<br>", []),
      c("Page()", "/paginator.py<br>", [
        d("__getitem__(self, index)"),
        d("__init__(self, object_list, number, paginator)"),
        d("__len__(self)"),
        d("__repr__(self)"),
        d("end_index(self)"),
        d("has_next(self)"),
        d("has_other_pages(self)"),
        d("has_previous(self)"),
        d("next_page_number(self)"),
        d("previous_page_number(self)"),
        d("start_index(self)"),
      ]),
      c("PageNotAnInteger(InvalidPage)", "/paginator.py<br>", []),
      c("Paginator(object)", "/paginator.py<br>", [
        d("__init__(self, object_list, per_page, orphans, allow_empty_first_page)"),
        d("_get_count(self)"),
        d("_get_num_pages(self)"),
        d("_get_page(self)"),
        d("_get_page_range(self)"),
        d("page(self, number)"),
        d("validate_number(self, number)"),
      ]),
    ]),
    c("signing.py", "/signing.py<br> Functions for creating and restoring url-safe signed JSON objects.  The format used looks like this:  >>> signing.dumps('hello') 'ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv422nZA4sgmk'  There are two components here, separated by a ':'. The first component is a URLsafe base64 encoded JSON of the object pass...", [
      c("BadSignature(Exception)", "/signing.py<br>Signature does not match", []),
      c("JSONSerializer(object)", "/signing.py<br>Simple wrapper around json to be used in signing.dumps and signing.loads.", [
        d("dumps(self, obj)"),
        d("loads(self, data)"),
      ]),
      c("SignatureExpired(BadSignature)", "/signing.py<br>Signature timestamp is older than required max_age", []),
      c("Signer(object)", "/signing.py<br>", [
        d("__init__(self, key, sep, salt)"),
        d("sign(self, value)"),
        d("signature(self, value)"),
        d("unsign(self, signed_value)"),
      ]),
      c("TimestampSigner(Signer)", "/signing.py<br>", [
        d("sign(self, value)"),
        d("timestamp(self)"),
        d("unsign(self, value, max_age)"),
      ]),
      d("b64_decode(s)"),
      d("b64_encode(s)"),
      d("base64_hmac(salt, value, key)"),
      d("dumps(obj, key, salt, serializer, compress)", "Returns URL-safe, sha1 signed base64 compressed JSON string. If key is None, settings.SECRET_KEY is used instead.  If compress is True (not the default) checks if compressing using zlib can save some space. Prepends a '.' to signify compression. This is included in the signature, to protect against ..."),
      d("get_cookie_signer(salt)"),
      d("loads(s, key, salt, serializer, max_age)", "Reverse of dumps(), raises BadSignature if signature fails.  The serializer is expected to accept a bytestring."),
    ]),
    c("urlresolvers.py", "/urlresolvers.py<br> This module converts requested URLs to callback view functions.  RegexURLResolver is the main class here. Its resolve() method takes a URL (as a string) and returns a ResolverMatch object which provides access to all attributes of the resolved URL match.", [
      c("LocaleRegexProvider(object)", "/urlresolvers.py<br>A mixin to provide a default regex property which can vary by active language.", [
        d("__init__(self, regex)"),
        d("regex(self)"),
      ]),
      c("LocaleRegexURLResolver(RegexURLResolver)", "/urlresolvers.py<br>A URL resolver that always matches the active language code as URL prefix.  Rather than taking a regex argument, we just override the ``regex`` function to always return the active language-code as regex.", [
        d("__init__(self, urlconf_name, default_kwargs, app_name, namespace)"),
        d("regex(self)"),
      ]),
      c("NoReverseMatch(Exception)", "/urlresolvers.py<br>", []),
      c("RegexURLPattern(LocaleRegexProvider)", "/urlresolvers.py<br>", [
        d("__init__(self, regex, callback, default_args, name)"),
        d("__repr__(self)"),
        d("add_prefix(self, prefix)"),
        d("callback(self)"),
        d("resolve(self, path)"),
      ]),
      c("RegexURLResolver(LocaleRegexProvider)", "/urlresolvers.py<br>", [
        d("__init__(self, regex, urlconf_name, default_kwargs, app_name, namespace)"),
        d("__repr__(self)"),
        d("_is_callback(self, name)"),
        d("_populate(self)"),
        d("_reverse_with_prefix(self, lookup_view, _prefix)"),
        d("app_dict(self)"),
        d("namespace_dict(self)"),
        d("resolve(self, path)"),
        d("resolve_error_handler(self, view_type)"),
        d("reverse(self, lookup_view)"),
        d("reverse_dict(self)"),
        d("url_patterns(self)"),
        d("urlconf_module(self)"),
      ]),
      c("Resolver404(Http404)", "/urlresolvers.py<br>", []),
      c("ResolverMatch(object)", "/urlresolvers.py<br>", [
        d("__getitem__(self, index)"),
        d("__init__(self, func, args, kwargs, url_name, app_names, namespaces)"),
        d("__repr__(self)"),
      ]),
      d("clear_script_prefix()", "Unsets the script prefix for the current thread."),
      d("clear_url_caches()"),
      d("get_callable(lookup_view, can_fail)", "Return a callable corresponding to lookup_view. This function is used by both resolve() and reverse(), so can_fail allows the caller to choose between returning the input as is and raising an exception when the input string can't be interpreted as an import path.  If lookup_view is already a callabl..."),
      d("get_mod_func(callback)"),
      d("get_ns_resolver(ns_pattern, resolver)"),
      d("get_resolver(urlconf)"),
      d("get_script_prefix()", "Returns the currently active script prefix. Useful for client code that wishes to construct their own URLs manually (although accessing the request instance is normally going to be a lot cleaner)."),
      d("get_urlconf(default)", "Returns the root URLconf to use for the current thread if it has been changed from the default one."),
      d("is_valid_path(path, urlconf)", "Returns True if the given path resolves against the default URL resolver, False otherwise.  This is a convenience method to make working with 'is this a match?' cases easier, avoiding unnecessarily indented try...except blocks."),
      d("resolve(path, urlconf)"),
      d("reverse(viewname, urlconf, args, kwargs, current_app)"),
      d("set_script_prefix(prefix)", "Sets the script prefix for the current thread."),
      d("set_urlconf(urlconf_name)", "Sets the URLconf for the current thread (overriding the default one in settings). Set to None to revert back to the default."),
      d("translate_url(url, lang_code)", "Given a URL (absolute or relative), try to get its translated version in the `lang_code` language (either by i18n_patterns or by translated regex). Return the original URL if no translated version is found."),
    ]),
    c("validators.py", "/validators.py<br>", [
      c("BaseValidator(object)", "/validators.py<br>", [
        d("__call__(self, value)"),
        d("__eq__(self, other)"),
        d("__init__(self, limit_value, message)"),
      ]),
      c("DecimalValidator(object)", "/validators.py<br>Validate that the input does not exceed the maximum number of digits expected, otherwise raise ValidationError.", [
        d("__call__(self, value)"),
        d("__eq__(self, other)"),
        d("__init__(self, max_digits, decimal_places)"),
      ]),
      c("EmailValidator(object)", "/validators.py<br>", [
        d("__call__(self, value)"),
        d("__eq__(self, other)"),
        d("__init__(self, message, code, whitelist)"),
        d("validate_domain_part(self, domain_part)"),
      ]),
      c("MaxLengthValidator(BaseValidator)", "/validators.py<br>", []),
      c("MaxValueValidator(BaseValidator)", "/validators.py<br>", []),
      c("MinLengthValidator(BaseValidator)", "/validators.py<br>", []),
      c("MinValueValidator(BaseValidator)", "/validators.py<br>", []),
      c("RegexValidator(object)", "/validators.py<br>", [
        d("__call__(self, value)"),
        d("__eq__(self, other)"),
        d("__init__(self, regex, message, code, inverse_match, flags)"),
        d("__ne__(self, other)"),
      ]),
      c("URLValidator(RegexValidator)", "/validators.py<br>", [
        d("__call__(self, value)"),
        d("__init__(self, schemes)"),
      ]),
      d("_lazy_re_compile(regex, flags)", "Lazily compile a regex with flags."),
      d("int_list_validator(sep, message, code)"),
      d("ip_address_validators(protocol, unpack_ipv4)", "Depending on the given parameters returns the appropriate validators for the GenericIPAddressField.  This code is here, because it is exactly the same for the model and the form field."),
      d("validate_integer(value)"),
      d("validate_ipv46_address(value)"),
      d("validate_ipv6_address(value)"),
    ]),
    c("wsgi.py", "/wsgi.py<br>", [
      d("get_wsgi_application()", "The public interface to Django's WSGI support. Should return a WSGI callable.  Allows us to avoid making django.core.handlers.WSGIHandler public API, in case the internal WSGI implementation changes or moves in the future."),
    ]),
  ]
});
