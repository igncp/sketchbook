var d = diagrams.box.generateDefinition,
  c = diagrams.box.generateContainer,
  s = diagrams.shared.get;

diagrams.box({
  name: s('project') + ' structure',
  body: [
    c("gaussian_process", [
      c("tests", [
        d("test_gaussian_process.py"),
        d("__init__.py"),
      ]),
      d("__init__.py"),
      d("regression_models.py"),
      d("gaussian_process.py"),
      d("correlation_models.py"),
    ]),
    d("qda.py"),
    c("preprocessing", [
      d("imputation.py"),
      d("data.py"),
      c("tests", [
        d("test_imputation.py"),
        d("__init__.py"),
        d("test_label.py"),
        d("test_function_transformer.py"),
        d("test_data.py"),
        d("test_weights.py"),
      ]),
      d("_function_transformer.py"),
      d("label.py"),
      d("__init__.py"),
      d("_weights.py"),
    ]),
    c("tests", [
      d("test_base.py"),
      d("test_grid_search.py"),
      d("test_cross_validation.py"),
      d("test_pipeline.py"),
      d("test_learning_curve.py"),
      d("__init__.py"),
      d("test_metaestimators.py"),
      d("test_calibration.py"),
      d("test_isotonic.py"),
      d("test_dummy.py"),
      d("test_multiclass.py"),
      d("test_naive_bayes.py"),
      d("test_kernel_approximation.py"),
      d("test_init.py"),
      d("test_random_projection.py"),
      d("test_kernel_ridge.py"),
      d("test_common.py"),
      d("test_lda.py"),
      d("test_qda.py"),
      d("test_check_build.py"),
    ]),
    c("manifold", [
      c("tests", [
        d("test_isomap.py"),
        d("test_t_sne.py"),
        d("test_mds.py"),
        d("test_spectral_embedding.py"),
        d("test_locally_linear.py"),
      ]),
      d("_utils.pyx"),
      d("mds.py"),
      d("_utils.c"),
      d("__init__.py"),
      d("t_sne.py"),
      d("locally_linear.py"),
      d("spectral_embedding_.py"),
      d("isomap.py"),
      d("setup.py"),
    ]),
    d("learning_curve.py"),
    d("_isotonic.pyx"),
    d("_build_utils.py"),
    d("naive_bayes.py"),
    c("mixture", [
      c("tests", [
        d("test_gmm.py"),
        d("test_dpgmm.py"),
        d("__init__.py"),
      ]),
      d("dpgmm.py"),
      d("__init__.py"),
      d("gmm.py"),
    ]),
    c("decomposition", [
      d("dict_learning.py"),
      d("truncated_svd.py"),
      d("nmf.py"),
      c("tests", [
        d("test_pca.py"),
        d("test_dict_learning.py"),
        d("test_kernel_pca.py"),
        d("__init__.py"),
        d("test_nmf.py"),
        d("test_sparse_pca.py"),
        d("test_truncated_svd.py"),
        d("test_incremental_pca.py"),
        d("test_fastica.py"),
        d("test_factor_analysis.py"),
        d("test_online_lda.py"),
      ]),
      d("__init__.py"),
      d("kernel_pca.py"),
      d("pca.py"),
      d("factor_analysis.py"),
      d("online_lda.py"),
      d("incremental_pca.py"),
      d("sparse_pca.py"),
      d("_online_lda.pyx"),
      d("base.py"),
      d("fastica_.py"),
      d("setup.py"),
      d("_online_lda.c"),
    ]),
    d("_isotonic.c"),
    c("covariance", [
      d("shrunk_covariance_.py"),
      d("outlier_detection.py"),
      c("tests", [
        d("test_covariance.py"),
        d("test_graph_lasso.py"),
        d("__init__.py"),
        d("test_robust_covariance.py"),
      ]),
      d("empirical_covariance_.py"),
      d("__init__.py"),
      d("graph_lasso_.py"),
      d("robust_covariance.py"),
    ]),
    c("semi_supervised", [
      d("label_propagation.py"),
      c("tests", [
        d("__init__.py"),
        d("test_label_propagation.py"),
      ]),
      d("__init__.py"),
    ]),
    d("__init__.py"),
    d("cross_validation.py"),
    c("cross_decomposition", [
      c("tests", [
        d("test_pls.py"),
      ]),
      d("__init__.py"),
      d("pls_.py"),
      d("cca_.py"),
    ]),
    c("neural_network", [
      c("tests", [
        d("test_rbm.py"),
      ]),
      d("__init__.py"),
      d("rbm.py"),
    ]),
    d("kernel_ridge.py"),
    c("utils", [
      d("arrayfuncs.c"),
      d("estimator_checks.py"),
      d("_random.pyx"),
      d("arrayfuncs.pyx"),
      d("_logistic_sigmoid.c"),
      d("_logistic_sigmoid.pyx"),
      d("fast_dict.pxd"),
      d("_random.pxd"),
      c("tests", [
        d("test_optimize.py"),
        d("test_murmurhash.py"),
        d("test_linear_assignment.py"),
        d("test_validation.py"),
        d("test_shortest_path.py"),
        d("test_estimator_checks.py"),
        d("test_fast_dict.py"),
        d("__init__.py"),
        d("test_bench.py"),
        d("test_metaestimators.py"),
        d("test_utils.py"),
        d("test_random.py"),
        d("test_class_weight.py"),
        d("test_multiclass.py"),
        d("test_extmath.py"),
        d("test_fixes.py"),
        d("test_sparsefuncs.py"),
        d("test_graph.py"),
        d("test_stats.py"),
        d("test_testing.py"),
      ]),
      d("weight_vector.pyx"),
      d("_random.c"),
      d("bench.py"),
      d("mocking.py"),
      d("metaestimators.py"),
      d("linear_assignment_.py"),
      d("testing.py"),
      d("optimize.py"),
      d("__init__.py"),
      d("validation.py"),
      d("murmurhash.pyx"),
      d("seq_dataset.pyx"),
      c("sparsetools", [
        d("README"),
        d("_graph_tools.pyx"),
        c("tests", [
          d("test_traversal.py"),
        ]),
        d("_traversal.pyx"),
        d("__init__.py"),
        d("_traversal.c"),
        d("_graph_validation.py"),
        d("_graph_tools.c"),
        d("setup.py"),
      ]),
      d("seq_dataset.c"),
      d("sparsefuncs.py"),
      d("murmurhash.pxd"),
      d("fixes.py"),
      d("sparsefuncs_fast.pyx"),
      d("multiclass.py"),
      d("stats.py"),
      d("class_weight.py"),
      d("fast_dict.cpp"),
      d("graph_shortest_path.c"),
      d("_scipy_sparse_lsqr_backport.py"),
      d("weight_vector.pxd"),
      d("random.py"),
      d("lgamma.pyx"),
      d("lgamma.c"),
      d("fast_dict.pyx"),
      d("arpack.py"),
      d("lgamma.pxd"),
      d("murmurhash.c"),
      d("sparsefuncs_fast.c"),
      d("weight_vector.c"),
      d("seq_dataset.pxd"),
      d("setup.py"),
      d("extmath.py"),
      c("src", [
        d("gamma.c"),
        d("MurmurHash3.cpp"),
        d("MurmurHash3.h"),
        d("gamma.h"),
        d("cholesky_delete.h"),
      ]),
      d("graph.py"),
      d("sparsefuncs_fast.pxd"),
      d("graph_shortest_path.pyx"),
    ]),
    d("isotonic.py"),
    c("linear_model", [
      d("omp.py"),
      d("cd_fast.pyx"),
      c("tests", [
        d("test_base.py"),
        d("test_least_angle.py"),
        d("test_theil_sen.py"),
        d("test_ridge.py"),
        d("test_omp.py"),
        d("test_sparse_coordinate_descent.py"),
        d("__init__.py"),
        d("test_passive_aggressive.py"),
        d("test_randomized_l1.py"),
        d("test_bayes.py"),
        d("test_sgd.py"),
        d("test_perceptron.py"),
        d("test_logistic.py"),
        d("test_coordinate_descent.py"),
        d("test_ransac.py"),
      ]),
      d("sgd_fast_helpers.h"),
      d("theil_sen.py"),
      d("least_angle.py"),
      d("sgd_fast.c"),
      d("__init__.py"),
      d("bayes.py"),
      d("sgd_fast.pyx"),
      d("passive_aggressive.py"),
      d("randomized_l1.py"),
      d("ransac.py"),
      d("cd_fast.c"),
      d("logistic.py"),
      d("stochastic_gradient.py"),
      d("ridge.py"),
      d("base.py"),
      d("perceptron.py"),
      d("coordinate_descent.py"),
      d("setup.py"),
    ]),
    c("feature_extraction", [
      c("tests", [
        d("__init__.py"),
        d("test_image.py"),
        d("test_text.py"),
        d("test_feature_hasher.py"),
        d("test_dict_vectorizer.py"),
      ]),
      d("__init__.py"),
      d("dict_vectorizer.py"),
      d("text.py"),
      d("image.py"),
      d("_hashing.pyx"),
      d("stop_words.py"),
      d("_hashing.c"),
      d("hashing.py"),
      d("setup.py"),
    ]),
    c("cluster", [
      d("bicluster.py"),
      c("tests", [
        d("common.py"),
        d("test_mean_shift.py"),
        d("__init__.py"),
        d("test_spectral.py"),
        d("test_bicluster.py"),
        d("test_dbscan.py"),
        d("test_k_means.py"),
        d("test_affinity_propagation.py"),
        d("test_hierarchical.py"),
        d("test_birch.py"),
      ]),
      d("_k_means.c"),
      d("hierarchical.py"),
      d("birch.py"),
      d("__init__.py"),
      d("_feature_agglomeration.py"),
      d("_k_means.pyx"),
      d("k_means_.py"),
      d("_dbscan_inner.cpp"),
      d("_hierarchical.pyx"),
      d("_dbscan_inner.pyx"),
      d("dbscan_.py"),
      d("affinity_propagation_.py"),
      d("setup.py"),
      d("_hierarchical.cpp"),
      d("mean_shift_.py"),
      d("spectral.py"),
    ]),
    d("multiclass.py"),
    c("tree", [
      d("tree.py"),
      d("_tree.pyx"),
      c("tests", [
        d("test_export.py"),
        d("__init__.py"),
        d("test_tree.py"),
      ]),
      d("_utils.pyx"),
      d("_tree.pxd"),
      d("_utils.c"),
      d("__init__.py"),
      d("_utils.pxd"),
      d("_tree.c"),
      d("setup.py"),
      d("export.py"),
    ]),
    c("metrics", [
      d("pairwise_fast.pyx"),
      d("classification.py"),
      d("metrics.py"),
      d("regression.py"),
      c("tests", [
        d("test_ranking.py"),
        d("__init__.py"),
        d("test_classification.py"),
        d("test_regression.py"),
        d("test_pairwise.py"),
        d("test_common.py"),
        d("test_score_objects.py"),
      ]),
      d("ranking.py"),
      d("pairwise.py"),
      d("scorer.py"),
      d("__init__.py"),
      c("cluster", [
        d("bicluster.py"),
        c("tests", [
          d("test_unsupervised.py"),
          d("test_supervised.py"),
          d("__init__.py"),
          d("test_bicluster.py"),
        ]),
        d("supervised.py"),
        d("unsupervised.py"),
        d("__init__.py"),
        d("expected_mutual_info_fast.pyx"),
        d("setup.py"),
        d("expected_mutual_info_fast.c"),
      ]),
      d("base.py"),
      d("pairwise_fast.c"),
      d("setup.py"),
    ]),
    d("grid_search.py"),
    d("dummy.py"),
    c("datasets", [
      d("_svmlight_format.c"),
      c("images", [
        d("china.jpg"),
        d("flower.jpg"),
        d("README.txt"),
      ]),
      c("tests", [
        d("test_base.py"),
        d("test_lfw.py"),
        d("test_mldata.py"),
        d("__init__.py"),
        d("test_covtype.py"),
        d("test_samples_generator.py"),
        d("test_rcv1.py"),
        d("test_svmlight_format.py"),
        d("test_20news.py"),
        c("data", [
          d("svmlight_invalid.txt"),
          d("svmlight_invalid_order.txt"),
          d("svmlight_classification.txt"),
          d("svmlight_multilabel.txt"),
        ]),
      ]),
      d("svmlight_format.py"),
      d("mldata.py"),
      d("california_housing.py"),
      c("descr", [
        d("digits.rst"),
        d("boston_house_prices.rst"),
        d("diabetes.rst"),
        d("iris.rst"),
        d("linnerud.rst"),
      ]),
      d("__init__.py"),
      d("DATASET_PROPOSAL.txt"),
      d("olivetti_faces.py"),
      d("rcv1.py"),
      d("species_distributions.py"),
      d("covtype.py"),
      d("mlcomp.py"),
      d("lfw.py"),
      d("base.py"),
      c("data", [
        d("diabetes_data.csv.gz"),
        d("linnerud_physiological.csv"),
        d("iris.csv"),
        d("boston_house_prices.csv"),
        d("diabetes_target.csv.gz"),
        d("linnerud_exercise.csv"),
        d("digits.csv.gz"),
      ]),
      d("twenty_newsgroups.py"),
      d("setup.py"),
      d("_svmlight_format.pyx"),
      d("samples_generator.py"),
    ]),
    c("svm", [
      d("bounds.py"),
      d("libsvm.pyx"),
      d("libsvm.c"),
      c("tests", [
        d("test_sparse.py"),
        d("__init__.py"),
        d("test_bounds.py"),
        d("test_svm.py"),
      ]),
      d("liblinear.pyx"),
      d("libsvm.pxd"),
      d("__init__.py"),
      d("libsvm_sparse.pyx"),
      d("classes.py"),
      d("libsvm_sparse.c"),
      d("liblinear.c"),
      d("liblinear.pxd"),
      d("base.py"),
      d("setup.py"),
      c("src", [
        c("libsvm", [
          d("svm.h"),
          d("LIBSVM_CHANGES"),
          d("svm.cpp"),
          d("libsvm_template.cpp"),
          d("libsvm_helper.c"),
          d("libsvm_sparse_helper.c"),
        ]),
        c("liblinear", [
          d("COPYRIGHT"),
          d("liblinear_helper.c"),
          d("tron.h"),
          d("linear.h"),
          d("tron.cpp"),
          d("linear.cpp"),
        ]),
      ]),
    ]),
    c("ensemble", [
      d("partial_dependence.py"),
      c("tests", [
        d("test_base.py"),
        d("test_gradient_boosting_loss_functions.py"),
        d("test_forest.py"),
        d("__init__.py"),
        d("test_bagging.py"),
        d("test_weight_boosting.py"),
        d("test_partial_dependence.py"),
        d("test_gradient_boosting.py"),
        d("test_voting_classifier.py"),
      ]),
      d("__init__.py"),
      d("gradient_boosting.py"),
      d("_gradient_boosting.c"),
      d("bagging.py"),
      d("_gradient_boosting.pyx"),
      d("forest.py"),
      d("base.py"),
      d("voting_classifier.py"),
      d("setup.py"),
      d("weight_boosting.py"),
    ]),
    d("base.py"),
    c("feature_selection", [
      c("tests", [
        d("test_base.py"),
        d("__init__.py"),
        d("test_feature_select.py"),
        d("test_from_model.py"),
        d("test_variance_threshold.py"),
        d("test_chi2.py"),
        d("test_rfe.py"),
      ]),
      d("rfe.py"),
      d("from_model.py"),
      d("__init__.py"),
      d("variance_threshold.py"),
      d("base.py"),
      d("univariate_selection.py"),
    ]),
    d("pipeline.py"),
    d("lda.py"),
    d("kernel_approximation.py"),
    d("calibration.py"),
    d("setup.py"),
    c("src", [
      c("cblas", [
        d("cblas.h"),
        d("cblas_dscal.c"),
        d("cblas_drotg.c"),
        d("ATL_srefrot.c"),
        d("ATL_drefgemvT.c"),
        d("atlas_level1.h"),
        d("ATL_drefrot.c"),
        d("cblas_dasum.c"),
        d("cblas_dgemv.c"),
        d("cblas_scopy.c"),
        d("atlas_reflevel2.h"),
        d("atlas_dsysinfo.h"),
        d("cblas_daxpy.c"),
        d("atlas_misc.h"),
        d("ATL_drefgemv.c"),
        d("atlas_refmisc.h"),
        d("atlas_aux.h"),
        d("atlas_refalias2.h"),
        d("ATL_drefrotg.c"),
        d("ATL_drefcopy.c"),
        d("cblas_xerbla.c"),
        d("cblas_errprn.c"),
        d("cblas_dcopy.c"),
        d("ATL_drefger.c"),
        d("atlas_enum.h"),
        d("ATL_srefcopy.c"),
        d("cblas_srotg.c"),
        d("ATL_srefrotg.c"),
        d("atlas_reflevel1.h"),
        d("ATL_drefasum.c"),
        d("cblas_dger.c"),
        d("atlas_reflvl2.h"),
        d("cblas_srot.c"),
        d("atlas_ssysinfo.h"),
        d("atlas_type.h"),
        d("cblas_ddot.c"),
        d("atlas_level2.h"),
        d("cblas_dnrm2.c"),
        d("ATL_drefgemvN.c"),
        d("atlas_refalias1.h"),
        d("README.txt"),
        d("cblas_drot.c"),
      ]),
    ]),
    c("neighbors", [
      d("typedefs.pxd"),
      d("classification.py"),
      d("regression.py"),
      c("tests", [
        d("test_neighbors.py"),
        d("__init__.py"),
        d("test_nearest_centroid.py"),
        d("test_approximate.py"),
        d("test_kd_tree.py"),
        d("test_kde.py"),
        d("test_dist_metrics.py"),
        d("test_ball_tree.py"),
      ]),
      d("kd_tree.pyx"),
      d("dist_metrics.c"),
      d("unsupervised.py"),
      d("ball_tree.c"),
      d("typedefs.pyx"),
      d("kd_tree.c"),
      d("__init__.py"),
      d("ball_tree.pyx"),
      d("dist_metrics.pyx"),
      d("nearest_centroid.py"),
      d("binary_tree.pxi"),
      d("base.py"),
      d("approximate.py"),
      d("dist_metrics.pxd"),
      d("setup.py"),
      d("kde.py"),
      d("graph.py"),
      d("typedefs.c"),
    ]),
    d("random_projection.py"),
    c("__check_build", [
      d("__init__.py"),
      d("_check_build.c"),
      d("_check_build.pyx"),
      d("setup.py"),
    ]),
    c("externals", [
      d("README"),
      d("__init__.py"),
      d("six.py"),
      d("copy_joblib.sh"),
      c("joblib", [
        d("format_stack.py"),
        d("pool.py"),
        d("my_exceptions.py"),
        d("testing.py"),
        d("memory.py"),
        d("disk.py"),
        d("__init__.py"),
        d("numpy_pickle.py"),
        d("_compat.py"),
        d("_memory_helpers.py"),
        d("_multiprocessing_helpers.py"),
        d("func_inspect.py"),
        d("logger.py"),
        d("hashing.py"),
        d("parallel.py"),
      ]),
      d("test_externals_setup.py"),
      d("setup.py"),
    ]),
  ]
});
