var c = diagrams.box.generateContainer,
  cs = function() {
    var className = arguments[0].split(" ")[0],
      classShared = 'class-' + className,
      items, text;
    if (arguments.length === 2) {
      text = s(classShared);
      items = arguments[1];
    } else if (arguments.length === 3) {
      text = arguments[1] + sn(classShared);
      items = arguments[2];
    }
    return c.apply({}, [arguments[0], text, items]);
  },
  s = diagrams.shared.get,
  sn = diagrams.shared.getWithStartingBreakLine;

diagrams.box({
  name: s('project') + ' classes overview',
  body: [
    c('AbstractChangeDetector implements ChangeDetector', "/src/change_detection/abstract_change_detector.ts", [
      "_detectChanges(throwOnChange: boolean): void",
      "_detectChangesInLightDomChildren(throwOnChange: boolean): void",
      "_detectChangesInShadowDomChildren(throwOnChange: boolean): void",
      "addChild(cd: ChangeDetector): void",
      "addShadowDomChild(cd: ChangeDetector): void",
      "callOnAllChangesDone(): void",
      "checkNoChanges(): void",
      "constructor(public id: string)",
      "dehydrate(): void",
      "detectChanges(): void",
      "detectChangesInRecords(throwOnChange: boolean): void",
      "hydrate(context: any, locals: Locals, directives: any): void",
      "lightDomChildren: List<any> = [];",
      "markAsCheckOnce(): void",
      "markPathToRootAsCheckOnce(): void",
      "mode: string = null;",
      "parent: ChangeDetector;",
      "ref: ChangeDetectorRef;",
      "remove(): void",
      "removeChild(cd: ChangeDetector): void",
      "removeShadowDomChild(cd: ChangeDetector): void",
      "shadowDomChildren: List<any> = [];",
    ]),
    c('ApplicationRef', '/src/core/application.ts', [
      "_hostComponent: ComponentRef",
      "_hostComponentType: Type",
      "_injector: Injector",
      "constructor(hostComponent: ComponentRef, hostComponentType: Type, injector: Injector)",
      "dispose()",
      "get hostComponent()",
      "get hostComponentType()",
      "get injector()",
    ]),
    c('ChangeDetection', "@CONST(); /src/change_detection/interfaces.ts", [
      "createProtoChangeDetector(definition: ChangeDetectorDefinition): ProtoChangeDetector",
    ]),
    cs('ChangeDetectorRef', "/src/change_detection/change_detector_ref.ts", [
      "constructor(private _cd: ChangeDetector)",
      "requestCheck(): void",
      "detach(): void",
      "reattach(): void",
    ]),
    c('ComponentRef', '/src/core/compiler/dynamic_component_loader.ts', [
      "constructor(public location: ElementRef, public instance: any, public dispose: Function)",
      "get hostView(): ViewRef",
    ]),
    c('ElementRef implements RenderElementRef', "/src/core/compiler/element_ref.ts", [
      "constructor(public parentView: ViewRef, public boundElementIndex: number, private _renderer: Renderer)",
      "get renderView(): RenderViewRef",
      "set renderView(viewRef: RenderViewRef)",
      "get nativeElement(): any",
    ]),
    c('Injector', "/src/di/injector.ts", [
      "static resolve(bindings: List<Type | Binding | List<any>>): List<ResolvedBinding>",
      "static resolveAndCreate(bindings: List<Type | Binding | List<any>>, {defaultBindings = false}: any = {}): Injector",
      "static fromResolvedBindings(bindings: List<ResolvedBinding>, {defaultBindings = false}: any = {}): Injector",
      "_strategy: InjectorStrategy;",
      "_parent: Injector;",
      "_host: Injector;",
      "_constructionCounter: number = 0;",
      "private _ei: any;",
      "constructor(public _proto: ProtoInjector)",
      "get(token): any",
      "getOptional(token): any",
      "getObjAtIndex(index: number): any",
      "get parent(): Injector",
      "get strategy()",
      "hydrate(parent: Injector, host: Injector, ei: any)",
      "dehydrate(): void",
      "resolveAndCreateChild(bindings: List<Type | Binding | List<any>>): Injector",
      "createChildFromResolved(bindings: List<ResolvedBinding>): Injector",
      "_new(binding: ResolvedBinding): any",
      "private _getByDependency(dep: any, requestor: Key): any",
      "private _getByKey(key: Key, depVisibility: any, optional: boolean, requestor: Key): any",
      "getAppInjector(): Injector",
    ]),
    c('interface ChangeDetector', "/src/change_detection/interfaces.ts", [
      "parent: ChangeDetector;",
      "mode: string;",
      "addChild(cd: ChangeDetector): void;",
      "addShadowDomChild(cd: ChangeDetector): void;",
      "removeChild(cd: ChangeDetector): void;",
      "removeShadowDomChild(cd: ChangeDetector): void;",
      "remove(): void;",
      "hydrate(context: any, locals: Locals, directives: any): void;",
      "dehydrate(): void;",
      "markPathToRootAsCheckOnce(): void;",
      "detectChanges(): void;",
      "checkNoChanges(): void;",
    ]),
    c('interface RenderElementRef', "/src/render/api.ts", [
      "renderView: RenderViewRef;",
      "boundElementIndex: number;",
    ]),
    c('ListWrapper', "/src/facade/collection.ts", [
      "static createFixedSize(size): List<any>",
      "static createGrowableSize(size): List<any>",
      "static get(m, k)",
      "static set(m, k, v)",
      "static clone(array: List<any>)",
      "static map(array, fn)",
      "static forEach(array: List<any>, fn: Function)",
      "static first(array)",
      "static last(array)",
      "static find(list: List<any>, pred: Function)",
      "static indexOf(array: List<any>, value, startIndex = 0)",
      "static reduce<T, E>(list: List<T>, fn: (accumValue: E, currentValue: T, currentIndex: number, array: T[]) => E, init: E)",
      "static filter(array, pred: Function)",
      "static any(list: List<any>, pred: Function)",
      "static contains(list: List<any>, el)",
      "static reversed(array)",
      "static concat(a, b)",
      "static insert(list, index: int, value)",
      "static removeAt(list, index: int)",
      "static removeAll(list, items)",
      "static removeLast<T>(list: List<T>): T",
      "static remove(list, el)",
      "static clear(list)",
      "static join(list, s)",
      "static isEmpty(list)",
      "static fill(list: List<any>, value, start: int = 0, end: int = null)",
      "static equals(a: List<any>, b: List<any>): boolean",
      "static slice<T>(l: List<T>, from: int = 0, to: int = null): List<T>",
      "static splice<T>(l: List<T>, from: int, length: int): List<T>",
      "static sort<T>(l: List<T>, compareFn?: (a: T, b: T) => number)",
      "static toString<T>(l: List<T>): string",
    ]),
    c('NgZone', "/src/core/zone/ng_zone.ts", [
      "_createInnerZone(zone, enableLongStackTrace)",
      "_disabled: boolean;",
      "_hasExecutedCodeInInnerZone: boolean;",
      "_innerZone;",
      "_inVmTurnDone: boolean = false;",
      "_mountZone;",
      "_nestedRun: number;",
      "_onError(zone, e): void",
      "_onErrorHandler: (error, stack) => void;",
      "_onTurnDone: () => void;",
      "_onTurnStart: () => void;",
      "_pendingMicrotasks: number;",
      "constructor({enableLongStackTrace})",
      "initCallbacks({onTurnStart, onTurnDone, onErrorHandler}: { onTurnStart?: onTurnDone?: onErrorHandler?:} = {})",
      "run(fn)",
      "runOutsideAngular(fn)",
    ]),
    c('ViewRef', "/src/core/compiler/view_ref.ts", [
      "constructor(public _view: viewModule.AppView)",
      "get render(): RenderViewRef",
      "setLocal(contextName: string, value: any): void",
    ]),
  ]
});
