#!/usr/bin/env python

"""
Generate structure box diagram

To just print the dirs, add the --no-files option
"""

import sys
import os

import _common.utils as utils

dir_path = os.path.abspath(sys.argv[1])
out_path = os.path.abspath(sys.argv[2])
with_files = True
if len(sys.argv) > 3: with_files = (sys.argv[3].lower() != '--no-files')

excluded_dirs = ['.git', 'node_modules']


def wrap_in_description(path):
  return '\nd("' + os.path.basename(path) + '"),'


def is_valid_dir(path):
  return os.path.isdir(path) and is_valid_child(path)


def is_valid_child(path):
  return (os.path.basename(path) not in excluded_dirs)


def recursive_diagram_str_generation(path):
  if os.path.isdir(path):
    dir_list = sorted(os.listdir(path))
    any_child_is_dir = False
    if with_files is False:
      for child in dir_list:
        if is_valid_dir(os.path.join(path, child)): any_child_is_dir = True
    if (with_files or any_child_is_dir):
      returned_str = '\nc("' + os.path.basename(path) + '", ['
      for child in dir_list:
        child_path = os.path.join(path, child)
        if (with_files and is_valid_child(child_path)) or is_valid_dir(child_path):
          returned_str += recursive_diagram_str_generation(os.path.join(path, child))
      returned_str += ']),'
    else: returned_str = wrap_in_description(path)

  else: returned_str = wrap_in_description(path)

  return returned_str

diagram_str = """var d = diagrams.box.generateDefinition,
  c = diagrams.box.generateContainer,
  s = diagrams.shared.get;

diagrams.box({
  name: s('project') + ' dir structure',
  body: ["""
diagram_str += recursive_diagram_str_generation(dir_path)
diagram_str += "]});"

utils.set_file_content(out_path, diagram_str)
