#!/usr/bin/env python

import sys
import os

dir_path = os.path.abspath(sys.argv[1])
out_path = os.path.abspath(sys.argv[2])
with_files = True
if len(sys.argv) > 3: with_files = (sys.argv[3].lower() == 'true')

excluded_dirs = ['.git', 'node_modules']


def wrap_in_description(path):
  return '\nd("' + os.path.basename(path) + '"),'


def is_valid_dir(path):
  return os.path.isdir(path) and (os.path.basename(path) not in excluded_dirs)


def recursive_diagram_str_generation(path):
  if os.path.isdir(path):
    dir_list = os.listdir(path)
    any_child_is_dir = False
    if with_files is False:
      for child in dir_list:
        if is_valid_dir(os.path.join(path, child)): any_child_is_dir = True
    if (with_files or any_child_is_dir):
      returned_str = '\nc("' + os.path.basename(path) + '", ['
      for child in dir_list:
        if is_valid_dir(os.path.join(path, child)):
          returned_str += recursive_diagram_str_generation(os.path.join(path, child))
      returned_str += ']),'
    else: returned_str = wrap_in_description(path)

  else: returned_str = wrap_in_description(path)

  return returned_str

diagram_str = """var d = diagrams.box.generateDefinition,
  c = diagrams.box.generateContainer,
  s = diagrams.shared.get;

diagrams.box({
  name: s('project') + ' structure',
  body: ["""
diagram_str += recursive_diagram_str_generation(dir_path)
diagram_str += "]});"

with open(out_path, 'w') as out_file:
  out_file.write(diagram_str)
