#!/usr/bin/env python

import sys
import os
import unicodedata

import _common.utils as utils

project_path = os.path.abspath(sys.argv[1])
output_file_path = os.path.abspath(sys.argv[2])


def setInDict(dataDict, mapList, value):
  def getFromDict(dataDict, mapList):
      return reduce(lambda d, k: d[k], mapList, dataDict)
  getFromDict(dataDict, mapList[:-1])[mapList[-1]] = value


def generate_nested_api():
  def fill_tree_dict(d, k):
    if k not in d: d[k] = {}
    return d[k]

  def update_tree_dict_with_path(path):
    path_steps = path[1:].split('/')
    reduce(fill_tree_dict, path_steps, tree_dict)
    setInDict(tree_dict, path_steps, ''.join(files_dict[path]))

  def generate_str_recursively(data, path):
    if isinstance(data, dict):
      data_keys = data.keys()

      def mykey(x):
        steps = x.split('/')
        last_step = steps[-1]
        return utils.is_python_file(last_step), x.upper()

      data_keys = sorted(data_keys, key=mykey)
      final_str = ''
      for data_key in data_keys:
        current_path = path + '/' + data_key
        ds = ''
        if current_path in files_doc_strings_dict: ds = ' ' + files_doc_strings_dict[current_path]
        final_str += '\nc("' + data_key + '", "' + utils.add_path_as_info(current_path) + ds
        final_str += '", [' + generate_str_recursively(data[data_key], current_path)
        final_str += ']),'
      return final_str
    elif isinstance(data, str) or isinstance(data, unicode):
      if isinstance(data, unicode):
        data = unicodedata.normalize('NFKD', data).encode('ascii', 'ignore')
      return data

  tree_dict = {}
 
  files_dict_keys = sorted(files_dict.keys())
  for files_dict_key in files_dict_keys:
    update_tree_dict_with_path(files_dict_key)
  
  return generate_str_recursively(tree_dict, '')


def add_item_to_files_dict(path, addition):
  if (path not in files_dict): files_dict[path] = []
  files_dict[path].append(addition)


def get_api_elements_of_box_dict(path):
  file_api_elements = utils.get_api_elements_of_file(path)
  file_doc_string = utils.get_file_doc_tring(path)

  relative_path = path.replace(project_path, '')
  if file_doc_string: files_doc_strings_dict[relative_path] = file_doc_string

  for element in file_api_elements:
    element_str = ''
    if element['type'] == 'class':
      element_str = '\nc("' + element['name'] + '(' + ', '.join(element['bases']) + ')", "'
      element_str += utils.add_path_as_info(relative_path)
      if element['doc_string']: element_str += element['doc_string']
      element_str += '", ['
      method_strs = ['d("' + method['name'] + '(' + ', '.join(method['args']) + ')"),'
        for method in element['methods']]
      element_str += '\n' + '\n'.join(sorted(method_strs)) + ']),'
    if element['type'] == 'function':
      element_str = '\nd("' + element['name'] + '(' + ', '.join(element['args']) + ')"'
      if element['doc_string']: element_str += ', "' + element['doc_string'] + '"'
      element_str += '),'
    add_item_to_files_dict(relative_path, element_str)

files_dict = {}
files_doc_strings_dict = {}

utils.walk_dir_python_files(project_path, get_api_elements_of_box_dict)

diagram_str = generate_nested_api()
diagram_str = utils.wrap_str_in_box_diagram(diagram_str, 'generated api overview')

utils.set_file_content(output_file_path, diagram_str)
