#!/usr/bin/env python

import ast
import sys
import os

common_dir_path = os.path.realpath(os.path.dirname(__file__) + '/..')
sys.path.insert(0, common_dir_path)
import _common.utils as utils

path = os.path.abspath(sys.argv[1])
output_file_path = os.path.abspath(sys.argv[2])
project_name = os.path.basename(path)

imports_names = {}
standard_import_names = {}
external_import_names = {}


def add_to_dict(name):
  module_name = name.split('.')[0]
  if module_name != project_name:
    if module_name not in imports_names:
      imports_names[module_name] = 0
    imports_names[module_name] += 1


def add_imports_names(path):
  f = open(path, 'r')
  content = f.read()
  f.close()
  parsed = ast.parse(content)
  imports = [node for node in parsed.body if isinstance(node, ast.Import)
    or isinstance(node, ast.ImportFrom)]

  for imprt in imports:
    if hasattr(imprt, 'level') is False or imprt.level == 0:
      if hasattr(imprt, 'module'):
        add_to_dict(imprt.module)
      else: add_to_dict(imprt.names[0].name)


def generate_import_names_str(imported_names_dict):
  final_str = ''
  names = imported_names_dict.keys()
  for name in sorted(names):
    final_str += '\nd("' + name + '", "' + str(imported_names_dict[name]) + ' times"),'
  return final_str


def separate_import_names():
  names = imports_names.keys()
  for name in sorted(names):
    try:
      module = __import__(name)
      if hasattr(module, '__file__'):
        file_name = module.__file__
        if 'pymodules' in file_name or 'dist-packages' in file_name\
          or 'lib-tk' in file_name:
          external_import_names[name] = imports_names[name]
        else:
          standard_import_names[name] = imports_names[name]
      else:
        standard_import_names[name] = imports_names[name]
    except ImportError:
      external_import_names[name] = imports_names[name]

utils.walk_dir_python_files(path, add_imports_names)

separate_import_names()

diagram_str = "c('standard', ["
diagram_str += generate_import_names_str(standard_import_names)
diagram_str += "\n]),\nc('external', ["
diagram_str += generate_import_names_str(external_import_names)
diagram_str += "\n])"
diagram_str = utils.wrap_str_in_box_diagram(diagram_str, 'packages dependencies')

utils.set_file_content(output_file_path, diagram_str)
